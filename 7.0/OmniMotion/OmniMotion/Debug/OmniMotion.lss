
OmniMotion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  00001782  00001816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  0080024c  0080024c  00001862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029e9  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e7  00000000  00000000  0000450d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f1  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c0  00000000  00000000  000069e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ff0  00000000  00000000  000072a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c0a  00000000  00000000  00008298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  00009ea2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c4       	rjmp	.+2466   	; 0x9a8 <__vector_1>
       6:	00 00       	nop
       8:	09 c5       	rjmp	.+2578   	; 0xa1c <__vector_2>
       a:	00 00       	nop
       c:	ea c4       	rjmp	.+2516   	; 0x9e2 <__vector_3>
       e:	00 00       	nop
      10:	22 c5       	rjmp	.+2628   	; 0xa56 <__vector_4>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c0       	rjmp	.+310    	; 0x164 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	19 c5       	rjmp	.+2610   	; 0xa90 <__vector_23>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	44 c7       	rjmp	.+3720   	; 0xeee <__vector_25>
      66:	00 00       	nop
      68:	71 c7       	rjmp	.+3810   	; 0xf4c <__vector_26>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c0       	rjmp	.+214    	; 0x164 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e2 c7       	rjmp	.+4036   	; 0x1056 <__vector_36>
      92:	00 00       	nop
      94:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_37>
      98:	65 c0       	rjmp	.+202    	; 0x164 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	63 c0       	rjmp	.+198    	; 0x164 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	61 c0       	rjmp	.+194    	; 0x164 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c0       	rjmp	.+190    	; 0x164 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c0       	rjmp	.+186    	; 0x164 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c0       	rjmp	.+182    	; 0x164 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c0       	rjmp	.+178    	; 0x164 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c0       	rjmp	.+174    	; 0x164 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c0       	rjmp	.+170    	; 0x164 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c0       	rjmp	.+166    	; 0x164 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c0       	rjmp	.+162    	; 0x164 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c0       	rjmp	.+158    	; 0x164 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c0       	rjmp	.+154    	; 0x164 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__vector_51>
      d0:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_52>
      d4:	47 c0       	rjmp	.+142    	; 0x164 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__vector_54>
      dc:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_55>
      e0:	41 c0       	rjmp	.+130    	; 0x164 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <__vector_2+0x32>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__ctors_start>:
     102:	cb 05       	cpc	r28, r11

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	12 e0       	ldi	r17, 0x02	; 2
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	e2 e8       	ldi	r30, 0x82	; 130
     11c:	f7 e1       	ldi	r31, 0x17	; 23
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	ac 34       	cpi	r26, 0x4C	; 76
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	23 e0       	ldi	r18, 0x03	; 3
     130:	ac e4       	ldi	r26, 0x4C	; 76
     132:	b2 e0       	ldi	r27, 0x02	; 2
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a2 3d       	cpi	r26, 0xD2	; 210
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>

0000013e <__do_global_ctors>:
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	c2 e8       	ldi	r28, 0x82	; 130
     142:	d0 e0       	ldi	r29, 0x00	; 0
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	06 c0       	rjmp	.+12     	; 0x154 <__do_global_ctors+0x16>
     148:	21 97       	sbiw	r28, 0x01	; 1
     14a:	01 09       	sbc	r16, r1
     14c:	80 2f       	mov	r24, r16
     14e:	fe 01       	movw	r30, r28
     150:	0e 94 b7 0b 	call	0x176e	; 0x176e <__tablejump2__>
     154:	c1 38       	cpi	r28, 0x81	; 129
     156:	d1 07       	cpc	r29, r17
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	08 07       	cpc	r16, r24
     15c:	a9 f7       	brne	.-22     	; 0x148 <__do_global_ctors+0xa>
     15e:	e0 d3       	rcall	.+1984   	; 0x920 <main>
     160:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <_ZN7encoder22Init_encoder_interruptEv>:



void encoder::Init_encoder_interrupt()
{
	sei();
     166:	78 94       	sei
	EICRA = 0b11111111;
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK |= (1<<INT0)|(1<<INT1) | (1<<INT2) | (1<<INT3);
     16e:	8d b3       	in	r24, 0x1d	; 29
     170:	8f 60       	ori	r24, 0x0F	; 15
     172:	8d bb       	out	0x1d, r24	; 29
     174:	08 95       	ret

00000176 <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()
{
	sei();
     176:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     178:	85 b5       	in	r24, 0x25	; 37
     17a:	85 60       	ori	r24, 0x05	; 5
     17c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     184:	08 95       	ret

00000186 <_ZN5MotorC1Eh>:

     private:
			
     public:
		uint8_t num;
		Motor(uint8_t no){
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
			num = no;
			InitPWM();
			StopMotor();
     18c:	68 83       	st	Y, r22
     18e:	4e d5       	rcall	.+2716   	; 0xc2c <_ZN5Motor7InitPWMEv>
			SetOcrValue(0);
     190:	ce 01       	movw	r24, r28
     192:	30 d6       	rcall	.+3168   	; 0xdf4 <_ZN5Motor9StopMotorEv>
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	70 e0       	ldi	r23, 0x00	; 0
			
		}
     198:	ce 01       	movw	r24, r28
     19a:	6d d6       	rcall	.+3290   	; 0xe76 <_ZN5Motor11SetOcrValueEi>
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <_Z12setTuningsM1v>:
pid ma,mb,mc,md;



void setTuningsM1(void)
{
     1a2:	4f 92       	push	r4
     1a4:	5f 92       	push	r5
     1a6:	6f 92       	push	r6
     1a8:	7f 92       	push	r7
     1aa:	8f 92       	push	r8
     1ac:	9f 92       	push	r9
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
	ma.input = e1.speed;
     1be:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <e1+0x2>
     1c2:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <e1+0x3>
     1c6:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <e1+0x4>
     1ca:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <e1+0x5>
     1ce:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fixsfsi>
     1d2:	6b 01       	movw	r12, r22
     1d4:	7c 01       	movw	r14, r24
     1d6:	ea ea       	ldi	r30, 0xAA	; 170
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	71 83       	std	Z+1, r23	; 0x01
     1dc:	60 83       	st	Z, r22
	if (ma.SETPOINT > 0)
     1de:	86 85       	ldd	r24, Z+14	; 0x0e
     1e0:	97 85       	ldd	r25, Z+15	; 0x0f
     1e2:	18 16       	cp	r1, r24
     1e4:	19 06       	cpc	r1, r25
     1e6:	3c f4       	brge	.+14     	; 0x1f6 <_Z12setTuningsM1v+0x54>
		ma.error = ma.SETPOINT - ma.input;
     1e8:	8c 19       	sub	r24, r12
     1ea:	9d 09       	sbc	r25, r13
     1ec:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <ma+0x5>
     1f0:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ma+0x4>
     1f4:	08 c0       	rjmp	.+16     	; 0x206 <_Z12setTuningsM1v+0x64>
	else if (ma.SETPOINT < 0)
     1f6:	99 23       	and	r25, r25
     1f8:	34 f4       	brge	.+12     	; 0x206 <_Z12setTuningsM1v+0x64>
		ma.error = ma.SETPOINT + ma.input;
     1fa:	8c 0d       	add	r24, r12
     1fc:	9d 1d       	adc	r25, r13
     1fe:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <ma+0x5>
     202:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ma+0x4>
	ma.Iterm += ki * ma.error;
     206:	ca ea       	ldi	r28, 0xAA	; 170
     208:	d2 e0       	ldi	r29, 0x02	; 2
     20a:	6c 81       	ldd	r22, Y+4	; 0x04
     20c:	7d 81       	ldd	r23, Y+5	; 0x05
     20e:	07 2e       	mov	r0, r23
     210:	00 0c       	add	r0, r0
     212:	88 0b       	sbc	r24, r24
     214:	99 0b       	sbc	r25, r25
     216:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     21a:	2b 01       	movw	r4, r22
     21c:	3c 01       	movw	r6, r24
     21e:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <ki>
     222:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <ki+0x1>
     226:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <ki+0x2>
     22a:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <ki+0x3>
     22e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     232:	2e 81       	ldd	r18, Y+6	; 0x06
     234:	3f 81       	ldd	r19, Y+7	; 0x07
     236:	48 85       	ldd	r20, Y+8	; 0x08
     238:	59 85       	ldd	r21, Y+9	; 0x09
     23a:	0e 94 43 09 	call	0x1286	; 0x1286 <__addsf3>
     23e:	4b 01       	movw	r8, r22
     240:	5c 01       	movw	r10, r24
     242:	6e 83       	std	Y+6, r22	; 0x06
     244:	7f 83       	std	Y+7, r23	; 0x07
     246:	88 87       	std	Y+8, r24	; 0x08
     248:	99 87       	std	Y+9, r25	; 0x09
	
	ma.output = kp * ma.error + ma.Iterm - kd * (ma.input - ma.previnput) ;
     24a:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <kp>
     24e:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <kp+0x1>
     252:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <kp+0x2>
     256:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <kp+0x3>
     25a:	c3 01       	movw	r24, r6
     25c:	b2 01       	movw	r22, r4
     25e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     262:	a5 01       	movw	r20, r10
     264:	94 01       	movw	r18, r8
     266:	0e 94 43 09 	call	0x1286	; 0x1286 <__addsf3>
     26a:	4b 01       	movw	r8, r22
     26c:	5c 01       	movw	r10, r24
     26e:	8a 85       	ldd	r24, Y+10	; 0x0a
     270:	9b 85       	ldd	r25, Y+11	; 0x0b
     272:	b6 01       	movw	r22, r12
     274:	68 1b       	sub	r22, r24
     276:	79 0b       	sbc	r23, r25
     278:	07 2e       	mov	r0, r23
     27a:	00 0c       	add	r0, r0
     27c:	88 0b       	sbc	r24, r24
     27e:	99 0b       	sbc	r25, r25
     280:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     284:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <kd>
     288:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <kd+0x1>
     28c:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <kd+0x2>
     290:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <kd+0x3>
     294:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     298:	9b 01       	movw	r18, r22
     29a:	ac 01       	movw	r20, r24
     29c:	c5 01       	movw	r24, r10
     29e:	b4 01       	movw	r22, r8
     2a0:	f1 d7       	rcall	.+4066   	; 0x1284 <__subsf3>
     2a2:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fixsfsi>
     2a6:	7b 83       	std	Y+3, r23	; 0x03
     2a8:	6a 83       	std	Y+2, r22	; 0x02
	
	ma.previnput = ma.input;
     2aa:	db 86       	std	Y+11, r13	; 0x0b
     2ac:	ca 86       	std	Y+10, r12	; 0x0a
	ma.MOTOR_OCR_VALUE = ma.MOTOR_OCR_VALUE + ma.output;
     2ae:	2c 85       	ldd	r18, Y+12	; 0x0c
     2b0:	3d 85       	ldd	r19, Y+13	; 0x0d
     2b2:	62 0f       	add	r22, r18
     2b4:	73 1f       	adc	r23, r19
	
	if (ma.MOTOR_OCR_VALUE > ICR_TOP)
     2b6:	6a 3f       	cpi	r22, 0xFA	; 250
     2b8:	71 05       	cpc	r23, r1
     2ba:	2c f4       	brge	.+10     	; 0x2c6 <_Z12setTuningsM1v+0x124>
	ma.Iterm += ki * ma.error;
	
	ma.output = kp * ma.error + ma.Iterm - kd * (ma.input - ma.previnput) ;
	
	ma.previnput = ma.input;
	ma.MOTOR_OCR_VALUE = ma.MOTOR_OCR_VALUE + ma.output;
     2bc:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <ma+0xd>
     2c0:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <ma+0xc>
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <_Z12setTuningsM1v+0x130>
	
	if (ma.MOTOR_OCR_VALUE > ICR_TOP)
		ma.MOTOR_OCR_VALUE = ICR_TOP;
     2c6:	89 ef       	ldi	r24, 0xF9	; 249
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <ma+0xd>
     2ce:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <ma+0xc>

	m1.SetOcrValue(ma.MOTOR_OCR_VALUE);
     2d2:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <ma+0xc>
     2d6:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <ma+0xd>
     2da:	8f e4       	ldi	r24, 0x4F	; 79
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	cb d5       	rcall	.+2966   	; 0xe76 <_ZN5Motor11SetOcrValueEi>
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	bf 90       	pop	r11
     2ee:	af 90       	pop	r10
     2f0:	9f 90       	pop	r9
     2f2:	8f 90       	pop	r8
     2f4:	7f 90       	pop	r7
     2f6:	6f 90       	pop	r6
     2f8:	5f 90       	pop	r5
     2fa:	4f 90       	pop	r4
     2fc:	08 95       	ret

000002fe <_Z12setTuningsM2v>:

void setTuningsM2(void)
{
     2fe:	4f 92       	push	r4
     300:	5f 92       	push	r5
     302:	6f 92       	push	r6
     304:	7f 92       	push	r7
     306:	8f 92       	push	r8
     308:	9f 92       	push	r9
     30a:	af 92       	push	r10
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	mb.input = e2.speed;
     31a:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <e2+0x2>
     31e:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <e2+0x3>
     322:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <e2+0x4>
     326:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <e2+0x5>
     32a:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fixsfsi>
     32e:	6b 01       	movw	r12, r22
     330:	7c 01       	movw	r14, r24
     332:	ea e9       	ldi	r30, 0x9A	; 154
     334:	f2 e0       	ldi	r31, 0x02	; 2
     336:	71 83       	std	Z+1, r23	; 0x01
     338:	60 83       	st	Z, r22
	if (mb.SETPOINT > 0)
     33a:	86 85       	ldd	r24, Z+14	; 0x0e
     33c:	97 85       	ldd	r25, Z+15	; 0x0f
     33e:	18 16       	cp	r1, r24
     340:	19 06       	cpc	r1, r25
     342:	3c f4       	brge	.+14     	; 0x352 <_Z12setTuningsM2v+0x54>
		mb.error = mb.SETPOINT - mb.input;
     344:	8c 19       	sub	r24, r12
     346:	9d 09       	sbc	r25, r13
     348:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <mb+0x5>
     34c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <mb+0x4>
     350:	08 c0       	rjmp	.+16     	; 0x362 <_Z12setTuningsM2v+0x64>
	else if (mb.SETPOINT < 0)
     352:	99 23       	and	r25, r25
     354:	34 f4       	brge	.+12     	; 0x362 <_Z12setTuningsM2v+0x64>
		mb.error = mb.SETPOINT + mb.input;
     356:	8c 0d       	add	r24, r12
     358:	9d 1d       	adc	r25, r13
     35a:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <mb+0x5>
     35e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <mb+0x4>
	mb.Iterm += ki * mb.error;
     362:	ca e9       	ldi	r28, 0x9A	; 154
     364:	d2 e0       	ldi	r29, 0x02	; 2
     366:	6c 81       	ldd	r22, Y+4	; 0x04
     368:	7d 81       	ldd	r23, Y+5	; 0x05
     36a:	07 2e       	mov	r0, r23
     36c:	00 0c       	add	r0, r0
     36e:	88 0b       	sbc	r24, r24
     370:	99 0b       	sbc	r25, r25
     372:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     376:	2b 01       	movw	r4, r22
     378:	3c 01       	movw	r6, r24
     37a:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <ki>
     37e:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <ki+0x1>
     382:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <ki+0x2>
     386:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <ki+0x3>
     38a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     38e:	2e 81       	ldd	r18, Y+6	; 0x06
     390:	3f 81       	ldd	r19, Y+7	; 0x07
     392:	48 85       	ldd	r20, Y+8	; 0x08
     394:	59 85       	ldd	r21, Y+9	; 0x09
     396:	77 d7       	rcall	.+3822   	; 0x1286 <__addsf3>
     398:	4b 01       	movw	r8, r22
     39a:	5c 01       	movw	r10, r24
     39c:	6e 83       	std	Y+6, r22	; 0x06
     39e:	7f 83       	std	Y+7, r23	; 0x07
     3a0:	88 87       	std	Y+8, r24	; 0x08
     3a2:	99 87       	std	Y+9, r25	; 0x09
	
	mb.output = kp * mb.error + mb.Iterm - kd * (mb.input - mb.previnput) ;
     3a4:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <kp>
     3a8:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <kp+0x1>
     3ac:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <kp+0x2>
     3b0:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <kp+0x3>
     3b4:	c3 01       	movw	r24, r6
     3b6:	b2 01       	movw	r22, r4
     3b8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     3bc:	a5 01       	movw	r20, r10
     3be:	94 01       	movw	r18, r8
     3c0:	62 d7       	rcall	.+3780   	; 0x1286 <__addsf3>
     3c2:	4b 01       	movw	r8, r22
     3c4:	5c 01       	movw	r10, r24
     3c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ca:	b6 01       	movw	r22, r12
     3cc:	68 1b       	sub	r22, r24
     3ce:	79 0b       	sbc	r23, r25
     3d0:	07 2e       	mov	r0, r23
     3d2:	00 0c       	add	r0, r0
     3d4:	88 0b       	sbc	r24, r24
     3d6:	99 0b       	sbc	r25, r25
     3d8:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     3dc:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <kd>
     3e0:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <kd+0x1>
     3e4:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <kd+0x2>
     3e8:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <kd+0x3>
     3ec:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c5 01       	movw	r24, r10
     3f6:	b4 01       	movw	r22, r8
     3f8:	45 d7       	rcall	.+3722   	; 0x1284 <__subsf3>
     3fa:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fixsfsi>
     3fe:	7b 83       	std	Y+3, r23	; 0x03
     400:	6a 83       	std	Y+2, r22	; 0x02
	
	mb.previnput = mb.input;
     402:	db 86       	std	Y+11, r13	; 0x0b
     404:	ca 86       	std	Y+10, r12	; 0x0a
	mb.MOTOR_OCR_VALUE = mb.MOTOR_OCR_VALUE + mb.output;
     406:	2c 85       	ldd	r18, Y+12	; 0x0c
     408:	3d 85       	ldd	r19, Y+13	; 0x0d
     40a:	62 0f       	add	r22, r18
     40c:	73 1f       	adc	r23, r19
	
	if (mb.MOTOR_OCR_VALUE > ICR_TOP)
     40e:	6a 3f       	cpi	r22, 0xFA	; 250
     410:	71 05       	cpc	r23, r1
     412:	2c f4       	brge	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	mb.Iterm += ki * mb.error;
	
	mb.output = kp * mb.error + mb.Iterm - kd * (mb.input - mb.previnput) ;
	
	mb.previnput = mb.input;
	mb.MOTOR_OCR_VALUE = mb.MOTOR_OCR_VALUE + mb.output;
     414:	70 93 a7 02 	sts	0x02A7, r23	; 0x8002a7 <mb+0xd>
     418:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <mb+0xc>
     41c:	06 c0       	rjmp	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	
	if (mb.MOTOR_OCR_VALUE > ICR_TOP)
	mb.MOTOR_OCR_VALUE = ICR_TOP;
     41e:	89 ef       	ldi	r24, 0xF9	; 249
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <mb+0xd>
     426:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <mb+0xc>
	
	m2.SetOcrValue(mb.MOTOR_OCR_VALUE);
     42a:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <mb+0xc>
     42e:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <mb+0xd>
     432:	8e e4       	ldi	r24, 0x4E	; 78
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	1f d5       	rcall	.+2622   	; 0xe76 <_ZN5Motor11SetOcrValueEi>
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	9f 90       	pop	r9
     44a:	8f 90       	pop	r8
     44c:	7f 90       	pop	r7
     44e:	6f 90       	pop	r6
     450:	5f 90       	pop	r5
     452:	4f 90       	pop	r4
     454:	08 95       	ret

00000456 <_Z12setTuningsM3v>:

void setTuningsM3(void)
{
     456:	4f 92       	push	r4
     458:	5f 92       	push	r5
     45a:	6f 92       	push	r6
     45c:	7f 92       	push	r7
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
	mc.input = e3.speed;
     472:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <e3+0x2>
     476:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <e3+0x3>
     47a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <e3+0x4>
     47e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <e3+0x5>
     482:	d0 d7       	rcall	.+4000   	; 0x1424 <__fixsfsi>
     484:	6b 01       	movw	r12, r22
     486:	7c 01       	movw	r14, r24
     488:	ea e8       	ldi	r30, 0x8A	; 138
     48a:	f2 e0       	ldi	r31, 0x02	; 2
     48c:	71 83       	std	Z+1, r23	; 0x01
     48e:	60 83       	st	Z, r22
	if (mc.SETPOINT > 0)
     490:	86 85       	ldd	r24, Z+14	; 0x0e
     492:	97 85       	ldd	r25, Z+15	; 0x0f
     494:	18 16       	cp	r1, r24
     496:	19 06       	cpc	r1, r25
     498:	3c f4       	brge	.+14     	; 0x4a8 <_Z12setTuningsM3v+0x52>
		mc.error = mc.SETPOINT - mc.input;
     49a:	8c 19       	sub	r24, r12
     49c:	9d 09       	sbc	r25, r13
     49e:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <mc+0x5>
     4a2:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <mc+0x4>
     4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <_Z12setTuningsM3v+0x62>
	else if (mc.SETPOINT < 0)
     4a8:	99 23       	and	r25, r25
     4aa:	34 f4       	brge	.+12     	; 0x4b8 <_Z12setTuningsM3v+0x62>
	mc.error = mc.SETPOINT + mc.input;	
     4ac:	8c 0d       	add	r24, r12
     4ae:	9d 1d       	adc	r25, r13
     4b0:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <mc+0x5>
     4b4:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <mc+0x4>
	mc.Iterm += ki * mc.error;
     4b8:	ca e8       	ldi	r28, 0x8A	; 138
     4ba:	d2 e0       	ldi	r29, 0x02	; 2
     4bc:	6c 81       	ldd	r22, Y+4	; 0x04
     4be:	7d 81       	ldd	r23, Y+5	; 0x05
     4c0:	07 2e       	mov	r0, r23
     4c2:	00 0c       	add	r0, r0
     4c4:	88 0b       	sbc	r24, r24
     4c6:	99 0b       	sbc	r25, r25
     4c8:	e0 d7       	rcall	.+4032   	; 0x148a <__floatsisf>
     4ca:	2b 01       	movw	r4, r22
     4cc:	3c 01       	movw	r6, r24
     4ce:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <ki>
     4d2:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <ki+0x1>
     4d6:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <ki+0x2>
     4da:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <ki+0x3>
     4de:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     4e2:	2e 81       	ldd	r18, Y+6	; 0x06
     4e4:	3f 81       	ldd	r19, Y+7	; 0x07
     4e6:	48 85       	ldd	r20, Y+8	; 0x08
     4e8:	59 85       	ldd	r21, Y+9	; 0x09
     4ea:	cd d6       	rcall	.+3482   	; 0x1286 <__addsf3>
     4ec:	4b 01       	movw	r8, r22
     4ee:	5c 01       	movw	r10, r24
     4f0:	6e 83       	std	Y+6, r22	; 0x06
     4f2:	7f 83       	std	Y+7, r23	; 0x07
     4f4:	88 87       	std	Y+8, r24	; 0x08
     4f6:	99 87       	std	Y+9, r25	; 0x09
	
	mc.output = kp * mc.error + mc.Iterm - kd * (mc.input - mc.previnput) ;
     4f8:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <kp>
     4fc:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <kp+0x1>
     500:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <kp+0x2>
     504:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <kp+0x3>
     508:	c3 01       	movw	r24, r6
     50a:	b2 01       	movw	r22, r4
     50c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     510:	a5 01       	movw	r20, r10
     512:	94 01       	movw	r18, r8
     514:	b8 d6       	rcall	.+3440   	; 0x1286 <__addsf3>
     516:	4b 01       	movw	r8, r22
     518:	5c 01       	movw	r10, r24
     51a:	8a 85       	ldd	r24, Y+10	; 0x0a
     51c:	9b 85       	ldd	r25, Y+11	; 0x0b
     51e:	b6 01       	movw	r22, r12
     520:	68 1b       	sub	r22, r24
     522:	79 0b       	sbc	r23, r25
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	ae d7       	rcall	.+3932   	; 0x148a <__floatsisf>
     52e:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <kd>
     532:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <kd+0x1>
     536:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <kd+0x2>
     53a:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <kd+0x3>
     53e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__mulsf3>
     542:	9b 01       	movw	r18, r22
     544:	ac 01       	movw	r20, r24
     546:	c5 01       	movw	r24, r10
     548:	b4 01       	movw	r22, r8
     54a:	9c d6       	rcall	.+3384   	; 0x1284 <__subsf3>
     54c:	6b d7       	rcall	.+3798   	; 0x1424 <__fixsfsi>
     54e:	7b 83       	std	Y+3, r23	; 0x03
     550:	6a 83       	std	Y+2, r22	; 0x02
	
	mc.previnput = mc.input;
     552:	db 86       	std	Y+11, r13	; 0x0b
     554:	ca 86       	std	Y+10, r12	; 0x0a
	mc.MOTOR_OCR_VALUE = mc.MOTOR_OCR_VALUE + mc.output;
     556:	2c 85       	ldd	r18, Y+12	; 0x0c
     558:	3d 85       	ldd	r19, Y+13	; 0x0d
     55a:	62 0f       	add	r22, r18
     55c:	73 1f       	adc	r23, r19
	
	if (mc.MOTOR_OCR_VALUE > ICR_TOP)
     55e:	6a 3f       	cpi	r22, 0xFA	; 250
     560:	71 05       	cpc	r23, r1
     562:	2c f4       	brge	.+10     	; 0x56e <_Z12setTuningsM3v+0x118>
	mc.Iterm += ki * mc.error;
	
	mc.output = kp * mc.error + mc.Iterm - kd * (mc.input - mc.previnput) ;
	
	mc.previnput = mc.input;
	mc.MOTOR_OCR_VALUE = mc.MOTOR_OCR_VALUE + mc.output;
     564:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <mc+0xd>
     568:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <mc+0xc>
     56c:	06 c0       	rjmp	.+12     	; 0x57a <_Z12setTuningsM3v+0x124>
	
	if (mc.MOTOR_OCR_VALUE > ICR_TOP)
	mc.MOTOR_OCR_VALUE = ICR_TOP;
     56e:	89 ef       	ldi	r24, 0xF9	; 249
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <mc+0xd>
     576:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <mc+0xc>
	m3.SetOcrValue(mc.MOTOR_OCR_VALUE);
     57a:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <mc+0xc>
     57e:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <mc+0xd>
     582:	8d e4       	ldi	r24, 0x4D	; 77
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	77 d4       	rcall	.+2286   	; 0xe76 <_ZN5Motor11SetOcrValueEi>

}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	9f 90       	pop	r9
     59a:	8f 90       	pop	r8
     59c:	7f 90       	pop	r7
     59e:	6f 90       	pop	r6
     5a0:	5f 90       	pop	r5
     5a2:	4f 90       	pop	r4
     5a4:	08 95       	ret

000005a6 <_Z12setTuningsM4v>:
void setTuningsM4(void)
{
     5a6:	4f 92       	push	r4
     5a8:	5f 92       	push	r5
     5aa:	6f 92       	push	r6
     5ac:	7f 92       	push	r7
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
	
	md.input = e4.speed;
     5c2:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <e4+0x2>
     5c6:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <e4+0x3>
     5ca:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <e4+0x4>
     5ce:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <e4+0x5>
     5d2:	28 d7       	rcall	.+3664   	; 0x1424 <__fixsfsi>
     5d4:	6b 01       	movw	r12, r22
     5d6:	7c 01       	movw	r14, r24
     5d8:	ea e7       	ldi	r30, 0x7A	; 122
     5da:	f2 e0       	ldi	r31, 0x02	; 2
     5dc:	71 83       	std	Z+1, r23	; 0x01
     5de:	60 83       	st	Z, r22
	if (md.SETPOINT > 0)
     5e0:	86 85       	ldd	r24, Z+14	; 0x0e
     5e2:	97 85       	ldd	r25, Z+15	; 0x0f
     5e4:	18 16       	cp	r1, r24
     5e6:	19 06       	cpc	r1, r25
     5e8:	3c f4       	brge	.+14     	; 0x5f8 <_Z12setTuningsM4v+0x52>
		md.error = md.SETPOINT - md.input;
     5ea:	8c 19       	sub	r24, r12
     5ec:	9d 09       	sbc	r25, r13
     5ee:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <md+0x5>
     5f2:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <md+0x4>
     5f6:	0c c0       	rjmp	.+24     	; 0x610 <_Z12setTuningsM4v+0x6a>
	else if (ma.SETPOINT < 0)
     5f8:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <ma+0xe>
     5fc:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <ma+0xf>
     600:	33 23       	and	r19, r19
     602:	34 f4       	brge	.+12     	; 0x610 <_Z12setTuningsM4v+0x6a>
		md.error = md.SETPOINT + md.input;
     604:	8c 0d       	add	r24, r12
     606:	9d 1d       	adc	r25, r13
     608:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <md+0x5>
     60c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <md+0x4>
	md.Iterm += ki * md.error;
     610:	ca e7       	ldi	r28, 0x7A	; 122
     612:	d2 e0       	ldi	r29, 0x02	; 2
     614:	6c 81       	ldd	r22, Y+4	; 0x04
     616:	7d 81       	ldd	r23, Y+5	; 0x05
     618:	07 2e       	mov	r0, r23
     61a:	00 0c       	add	r0, r0
     61c:	88 0b       	sbc	r24, r24
     61e:	99 0b       	sbc	r25, r25
     620:	34 d7       	rcall	.+3688   	; 0x148a <__floatsisf>
     622:	2b 01       	movw	r4, r22
     624:	3c 01       	movw	r6, r24
     626:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <ki>
     62a:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <ki+0x1>
     62e:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <ki+0x2>
     632:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <ki+0x3>
     636:	ee d7       	rcall	.+4060   	; 0x1614 <__mulsf3>
     638:	2e 81       	ldd	r18, Y+6	; 0x06
     63a:	3f 81       	ldd	r19, Y+7	; 0x07
     63c:	48 85       	ldd	r20, Y+8	; 0x08
     63e:	59 85       	ldd	r21, Y+9	; 0x09
     640:	22 d6       	rcall	.+3140   	; 0x1286 <__addsf3>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	6e 83       	std	Y+6, r22	; 0x06
     648:	7f 83       	std	Y+7, r23	; 0x07
     64a:	88 87       	std	Y+8, r24	; 0x08
     64c:	99 87       	std	Y+9, r25	; 0x09
	
	md.output = kp * md.error + md.Iterm - kd * (md.input - md.previnput) ;
     64e:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <kp>
     652:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <kp+0x1>
     656:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <kp+0x2>
     65a:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <kp+0x3>
     65e:	c3 01       	movw	r24, r6
     660:	b2 01       	movw	r22, r4
     662:	d8 d7       	rcall	.+4016   	; 0x1614 <__mulsf3>
     664:	a5 01       	movw	r20, r10
     666:	94 01       	movw	r18, r8
     668:	0e d6       	rcall	.+3100   	; 0x1286 <__addsf3>
     66a:	4b 01       	movw	r8, r22
     66c:	5c 01       	movw	r10, r24
     66e:	8a 85       	ldd	r24, Y+10	; 0x0a
     670:	9b 85       	ldd	r25, Y+11	; 0x0b
     672:	b6 01       	movw	r22, r12
     674:	68 1b       	sub	r22, r24
     676:	79 0b       	sbc	r23, r25
     678:	07 2e       	mov	r0, r23
     67a:	00 0c       	add	r0, r0
     67c:	88 0b       	sbc	r24, r24
     67e:	99 0b       	sbc	r25, r25
     680:	04 d7       	rcall	.+3592   	; 0x148a <__floatsisf>
     682:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <kd>
     686:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <kd+0x1>
     68a:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <kd+0x2>
     68e:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <kd+0x3>
     692:	c0 d7       	rcall	.+3968   	; 0x1614 <__mulsf3>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	c5 01       	movw	r24, r10
     69a:	b4 01       	movw	r22, r8
     69c:	f3 d5       	rcall	.+3046   	; 0x1284 <__subsf3>
     69e:	c2 d6       	rcall	.+3460   	; 0x1424 <__fixsfsi>
     6a0:	7b 83       	std	Y+3, r23	; 0x03
     6a2:	6a 83       	std	Y+2, r22	; 0x02
	
	md.previnput = md.input;
     6a4:	db 86       	std	Y+11, r13	; 0x0b
     6a6:	ca 86       	std	Y+10, r12	; 0x0a
	md.MOTOR_OCR_VALUE = md.MOTOR_OCR_VALUE + md.output;
     6a8:	2c 85       	ldd	r18, Y+12	; 0x0c
     6aa:	3d 85       	ldd	r19, Y+13	; 0x0d
     6ac:	62 0f       	add	r22, r18
     6ae:	73 1f       	adc	r23, r19

	if (md.MOTOR_OCR_VALUE > ICR_TOP)
     6b0:	6a 3f       	cpi	r22, 0xFA	; 250
     6b2:	71 05       	cpc	r23, r1
     6b4:	2c f4       	brge	.+10     	; 0x6c0 <_Z12setTuningsM4v+0x11a>
	md.Iterm += ki * md.error;
	
	md.output = kp * md.error + md.Iterm - kd * (md.input - md.previnput) ;
	
	md.previnput = md.input;
	md.MOTOR_OCR_VALUE = md.MOTOR_OCR_VALUE + md.output;
     6b6:	70 93 87 02 	sts	0x0287, r23	; 0x800287 <md+0xd>
     6ba:	60 93 86 02 	sts	0x0286, r22	; 0x800286 <md+0xc>
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <_Z12setTuningsM4v+0x126>

	if (md.MOTOR_OCR_VALUE > ICR_TOP)
		md.MOTOR_OCR_VALUE = ICR_TOP;
     6c0:	89 ef       	ldi	r24, 0xF9	; 249
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <md+0xd>
     6c8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <md+0xc>
	
	m4.SetOcrValue(md.MOTOR_OCR_VALUE);
     6cc:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <md+0xc>
     6d0:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <md+0xd>
     6d4:	8c e4       	ldi	r24, 0x4C	; 76
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	ce d3       	rcall	.+1948   	; 0xe76 <_ZN5Motor11SetOcrValueEi>
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	7f 90       	pop	r7
     6f0:	6f 90       	pop	r6
     6f2:	5f 90       	pop	r5
     6f4:	4f 90       	pop	r4
     6f6:	08 95       	ret

000006f8 <_Z12calculatevelv>:
double value = PI / 180;

extern pid ma,mb,mc,md;

void calculatevel()
{
     6f8:	2f 92       	push	r2
     6fa:	3f 92       	push	r3
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	00 d0       	rcall	.+0      	; 0x71e <_Z12calculatevelv+0x26>
     71e:	1f 92       	push	r1
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	0f 2e       	mov	r0, r31
     726:	fe e6       	ldi	r31, 0x6E	; 110
     728:	ef 2e       	mov	r14, r31
     72a:	f2 e0       	ldi	r31, 0x02	; 2
     72c:	ff 2e       	mov	r15, r31
     72e:	f0 2d       	mov	r31, r0
     730:	0f 2e       	mov	r0, r31
     732:	f5 e0       	ldi	r31, 0x05	; 5
     734:	2f 2e       	mov	r2, r31
     736:	f2 e0       	ldi	r31, 0x02	; 2
     738:	3f 2e       	mov	r3, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	0f 2e       	mov	r0, r31
     73e:	fe e6       	ldi	r31, 0x6E	; 110
     740:	8f 2e       	mov	r8, r31
     742:	f2 e0       	ldi	r31, 0x02	; 2
     744:	9f 2e       	mov	r9, r31
     746:	f0 2d       	mov	r31, r0
     748:	fa 82       	std	Y+2, r15	; 0x02
     74a:	e9 82       	std	Y+1, r14	; 0x01
     74c:	88 e6       	ldi	r24, 0x68	; 104
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	9c 83       	std	Y+4, r25	; 0x04
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	81 01       	movw	r16, r2
     756:	a1 2c       	mov	r10, r1
     758:	b1 2c       	mov	r11, r1
     75a:	c1 2c       	mov	r12, r1
     75c:	d1 2c       	mov	r13, r1
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
     75e:	eb 81       	ldd	r30, Y+3	; 0x03
     760:	fc 81       	ldd	r31, Y+4	; 0x04
     762:	61 91       	ld	r22, Z+
     764:	71 91       	ld	r23, Z+
     766:	fc 83       	std	Y+4, r31	; 0x04
     768:	eb 83       	std	Y+3, r30	; 0x03
     76a:	f8 01       	movw	r30, r16
     76c:	41 90       	ld	r4, Z+
     76e:	51 90       	ld	r5, Z+
     770:	61 90       	ld	r6, Z+
     772:	71 90       	ld	r7, Z+
     774:	8f 01       	movw	r16, r30
     776:	07 2e       	mov	r0, r23
     778:	00 0c       	add	r0, r0
     77a:	88 0b       	sbc	r24, r24
     77c:	99 0b       	sbc	r25, r25
     77e:	85 d6       	rcall	.+3338   	; 0x148a <__floatsisf>
     780:	a3 01       	movw	r20, r6
     782:	92 01       	movw	r18, r4
     784:	47 d7       	rcall	.+3726   	; 0x1614 <__mulsf3>
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	6a 2d       	mov	r22, r10
     78c:	7b 2d       	mov	r23, r11
     78e:	8c 2d       	mov	r24, r12
     790:	9d 2d       	mov	r25, r13
     792:	79 d5       	rcall	.+2802   	; 0x1286 <__addsf3>
     794:	a6 2e       	mov	r10, r22
     796:	b7 2e       	mov	r11, r23
     798:	c8 2e       	mov	r12, r24
     79a:	d9 2e       	mov	r13, r25
{
	
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	88 15       	cp	r24, r8
     7a2:	99 05       	cpc	r25, r9
     7a4:	e1 f6       	brne	.-72     	; 0x75e <_Z12calculatevelv+0x66>
     7a6:	8a 2d       	mov	r24, r10
     7a8:	9b 2d       	mov	r25, r11
     7aa:	ac 2d       	mov	r26, r12
     7ac:	bd 2d       	mov	r27, r13
     7ae:	e9 81       	ldd	r30, Y+1	; 0x01
     7b0:	fa 81       	ldd	r31, Y+2	; 0x02
     7b2:	80 83       	st	Z, r24
     7b4:	91 83       	std	Z+1, r25	; 0x01
     7b6:	a2 83       	std	Z+2, r26	; 0x02
     7b8:	b3 83       	std	Z+3, r27	; 0x03
     7ba:	f4 e0       	ldi	r31, 0x04	; 4
     7bc:	ef 0e       	add	r14, r31
     7be:	f1 1c       	adc	r15, r1
     7c0:	8c e0       	ldi	r24, 0x0C	; 12
     7c2:	28 0e       	add	r2, r24
     7c4:	31 1c       	adc	r3, r1
extern pid ma,mb,mc,md;

void calculatevel()
{
	
	for(int i=0;i<4;i++)
     7c6:	9e e7       	ldi	r25, 0x7E	; 126
     7c8:	e9 16       	cp	r14, r25
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	f9 06       	cpc	r15, r25
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <_Z12calculatevelv+0xda>
     7d0:	bb cf       	rjmp	.-138    	; 0x748 <_Z12calculatevelv+0x50>
		for(int j=0;j<3;j++)
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
		}
	}
	ma.SETPOINT = (velocity_motor[0]*23)/249;
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	48 eb       	ldi	r20, 0xB8	; 184
     7d8:	51 e4       	ldi	r21, 0x41	; 65
     7da:	ee e6       	ldi	r30, 0x6E	; 110
     7dc:	f2 e0       	ldi	r31, 0x02	; 2
     7de:	60 81       	ld	r22, Z
     7e0:	71 81       	ldd	r23, Z+1	; 0x01
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	16 d7       	rcall	.+3628   	; 0x1614 <__mulsf3>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	49 e7       	ldi	r20, 0x79	; 121
     7ee:	53 e4       	ldi	r21, 0x43	; 67
     7f0:	b1 d5       	rcall	.+2914   	; 0x1354 <__divsf3>
     7f2:	18 d6       	rcall	.+3120   	; 0x1424 <__fixsfsi>
     7f4:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <ma+0xf>
     7f8:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <ma+0xe>
	mb.SETPOINT = (velocity_motor[1]*23)/249;
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	48 eb       	ldi	r20, 0xB8	; 184
     802:	51 e4       	ldi	r21, 0x41	; 65
     804:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <velocity_motor+0x4>
     808:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <velocity_motor+0x5>
     80c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <velocity_motor+0x6>
     810:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <velocity_motor+0x7>
     814:	ff d6       	rcall	.+3582   	; 0x1614 <__mulsf3>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	49 e7       	ldi	r20, 0x79	; 121
     81c:	53 e4       	ldi	r21, 0x43	; 67
     81e:	9a d5       	rcall	.+2868   	; 0x1354 <__divsf3>
     820:	01 d6       	rcall	.+3074   	; 0x1424 <__fixsfsi>
     822:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <mb+0xf>
     826:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <mb+0xe>
	mc.SETPOINT = (velocity_motor[2]*23)/249;
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	48 eb       	ldi	r20, 0xB8	; 184
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <velocity_motor+0x8>
     836:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <velocity_motor+0x9>
     83a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <velocity_motor+0xa>
     83e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <velocity_motor+0xb>
     842:	e8 d6       	rcall	.+3536   	; 0x1614 <__mulsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	49 e7       	ldi	r20, 0x79	; 121
     84a:	53 e4       	ldi	r21, 0x43	; 67
     84c:	83 d5       	rcall	.+2822   	; 0x1354 <__divsf3>
     84e:	ea d5       	rcall	.+3028   	; 0x1424 <__fixsfsi>
     850:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <mc+0xf>
     854:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <mc+0xe>
	md.SETPOINT = (velocity_motor[3]*23)/249;
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	48 eb       	ldi	r20, 0xB8	; 184
     85e:	51 e4       	ldi	r21, 0x41	; 65
     860:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <md>
     864:	70 91 7b 02 	lds	r23, 0x027B	; 0x80027b <md+0x1>
     868:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <md+0x2>
     86c:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <md+0x3>
     870:	d1 d6       	rcall	.+3490   	; 0x1614 <__mulsf3>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	49 e7       	ldi	r20, 0x79	; 121
     878:	53 e4       	ldi	r21, 0x43	; 67
     87a:	6c d5       	rcall	.+2776   	; 0x1354 <__divsf3>
     87c:	d3 d5       	rcall	.+2982   	; 0x1424 <__fixsfsi>
     87e:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <md+0xf>
     882:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <md+0xe>
	
}
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	3f 90       	pop	r3
     8b0:	2f 90       	pop	r2
     8b2:	08 95       	ret

000008b4 <_Z3movi>:



void mov(int degree)
{
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
	velocity_robot[0] = (100 * float(cos(degree * value)));
     8c0:	bc 01       	movw	r22, r24
     8c2:	99 0f       	add	r25, r25
     8c4:	88 0b       	sbc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	e0 d5       	rcall	.+3008   	; 0x148a <__floatsisf>
     8ca:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <value>
     8ce:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <value+0x1>
     8d2:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <value+0x2>
     8d6:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <value+0x3>
     8da:	9c d6       	rcall	.+3384   	; 0x1614 <__mulsf3>
     8dc:	6b 01       	movw	r12, r22
     8de:	7c 01       	movw	r14, r24
     8e0:	36 d5       	rcall	.+2668   	; 0x134e <cos>
     8e2:	c8 e6       	ldi	r28, 0x68	; 104
     8e4:	d2 e0       	ldi	r29, 0x02	; 2
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	48 ec       	ldi	r20, 0xC8	; 200
     8ec:	52 e4       	ldi	r21, 0x42	; 66
     8ee:	92 d6       	rcall	.+3364   	; 0x1614 <__mulsf3>
     8f0:	99 d5       	rcall	.+2866   	; 0x1424 <__fixsfsi>
     8f2:	79 83       	std	Y+1, r23	; 0x01
	velocity_robot[1] = (100 * float(sin(degree * value)));
     8f4:	68 83       	st	Y, r22
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	ef d6       	rcall	.+3550   	; 0x16da <sin>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	48 ec       	ldi	r20, 0xC8	; 200
     902:	52 e4       	ldi	r21, 0x42	; 66
     904:	87 d6       	rcall	.+3342   	; 0x1614 <__mulsf3>
     906:	8e d5       	rcall	.+2844   	; 0x1424 <__fixsfsi>
     908:	7b 83       	std	Y+3, r23	; 0x03
	velocity_robot[2] = 0;
     90a:	6a 83       	std	Y+2, r22	; 0x02
     90c:	1d 82       	std	Y+5, r1	; 0x05
	calculatevel();
     90e:	1c 82       	std	Y+4, r1	; 0x04
     910:	f3 de       	rcall	.-538    	; 0x6f8 <_Z12calculatevelv>
	
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <main>:


int main(void)
{
	
	sei();
     920:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
     922:	87 e6       	ldi	r24, 0x67	; 103
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	40 d3       	rcall	.+1664   	; 0xfa8 <_Z10uart0_initj>
			mov(45);
		else if (rcvdata == 'q')
			mov(60);
		else if(rcvdata == 's')
		{
			ma.SETPOINT = 0;
     928:	0f 2e       	mov	r0, r31
     92a:	fa ea       	ldi	r31, 0xAA	; 170
     92c:	cf 2e       	mov	r12, r31
     92e:	f2 e0       	ldi	r31, 0x02	; 2
     930:	df 2e       	mov	r13, r31
     932:	f0 2d       	mov	r31, r0
			mb.SETPOINT = 0;
     934:	0f 2e       	mov	r0, r31
     936:	fa e9       	ldi	r31, 0x9A	; 154
     938:	ef 2e       	mov	r14, r31
     93a:	f2 e0       	ldi	r31, 0x02	; 2
     93c:	ff 2e       	mov	r15, r31
     93e:	f0 2d       	mov	r31, r0
			mc.SETPOINT = 0;
     940:	0a e8       	ldi	r16, 0x8A	; 138
     942:	12 e0       	ldi	r17, 0x02	; 2
			md.SETPOINT = 0;
     944:	ca e7       	ldi	r28, 0x7A	; 122
     946:	d2 e0       	ldi	r29, 0x02	; 2
	
	sei();
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    while (1) 
    {
		uart0_puts("Abehesh don \r\n");
     948:	8d e3       	ldi	r24, 0x3D	; 61
     94a:	92 e0       	ldi	r25, 0x02	; 2
		rcvdata = uart0_getc();
     94c:	76 d3       	rcall	.+1772   	; 0x103a <_Z10uart0_putsPKc>
     94e:	45 d3       	rcall	.+1674   	; 0xfda <_Z10uart0_getcv>
     950:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		if (rcvdata == 'x')
     954:	88 37       	cpi	r24, 0x78	; 120
			mov(0);
     956:	21 f4       	brne	.+8      	; 0x960 <main+0x40>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	ab df       	rcall	.-170    	; 0x8b4 <_Z3movi>
		else if( rcvdata == 'y')
     95e:	1f c0       	rjmp	.+62     	; 0x99e <main+0x7e>
			mov(90);
     960:	89 37       	cpi	r24, 0x79	; 121
     962:	21 f4       	brne	.+8      	; 0x96c <main+0x4c>
     964:	8a e5       	ldi	r24, 0x5A	; 90
     966:	90 e0       	ldi	r25, 0x00	; 0
		else if(rcvdata == 'e')
     968:	a5 df       	rcall	.-182    	; 0x8b4 <_Z3movi>
     96a:	19 c0       	rjmp	.+50     	; 0x99e <main+0x7e>
			mov(45);
     96c:	85 36       	cpi	r24, 0x65	; 101
     96e:	21 f4       	brne	.+8      	; 0x978 <main+0x58>
     970:	8d e2       	ldi	r24, 0x2D	; 45
     972:	90 e0       	ldi	r25, 0x00	; 0
		else if (rcvdata == 'q')
     974:	9f df       	rcall	.-194    	; 0x8b4 <_Z3movi>
     976:	13 c0       	rjmp	.+38     	; 0x99e <main+0x7e>
			mov(60);
     978:	81 37       	cpi	r24, 0x71	; 113
     97a:	21 f4       	brne	.+8      	; 0x984 <main+0x64>
     97c:	8c e3       	ldi	r24, 0x3C	; 60
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	99 df       	rcall	.-206    	; 0x8b4 <_Z3movi>
		else if(rcvdata == 's')
     982:	0d c0       	rjmp	.+26     	; 0x99e <main+0x7e>
     984:	83 37       	cpi	r24, 0x73	; 115
		{
			ma.SETPOINT = 0;
     986:	59 f4       	brne	.+22     	; 0x99e <main+0x7e>
     988:	f6 01       	movw	r30, r12
     98a:	17 86       	std	Z+15, r1	; 0x0f
			mb.SETPOINT = 0;
			mc.SETPOINT = 0;
     98c:	16 86       	std	Z+14, r1	; 0x0e
			md.SETPOINT = 0;
     98e:	f7 01       	movw	r30, r14
     990:	17 86       	std	Z+15, r1	; 0x0f
		}
		//mov(60);
		setTuningsM1();
     992:	16 86       	std	Z+14, r1	; 0x0e
     994:	f8 01       	movw	r30, r16
		setTuningsM2();
     996:	17 86       	std	Z+15, r1	; 0x0f
     998:	16 86       	std	Z+14, r1	; 0x0e
		setTuningsM3();
     99a:	1f 86       	std	Y+15, r1	; 0x0f
     99c:	1e 86       	std	Y+14, r1	; 0x0e
		setTuningsM4();
     99e:	01 dc       	rcall	.-2046   	; 0x1a2 <_Z12setTuningsM1v>
     9a0:	ae dc       	rcall	.-1700   	; 0x2fe <_Z12setTuningsM2v>
int main(void)
{
	
	sei();
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    while (1) 
     9a2:	59 dd       	rcall	.-1358   	; 0x456 <_Z12setTuningsM3v>
     9a4:	00 de       	rcall	.-1024   	; 0x5a6 <_Z12setTuningsM4v>
     9a6:	d0 cf       	rjmp	.-96     	; 0x948 <main+0x28>

000009a8 <__vector_1>:
		
    }
}

ISR(INT0_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	0b b6       	in	r0, 0x3b	; 59
     9b4:	0f 92       	push	r0
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	e1.count_encoder++;
     9be:	e2 e6       	ldi	r30, 0x62	; 98
     9c0:	f2 e0       	ldi	r31, 0x02	; 2
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
}
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti

000009e2 <__vector_3>:
ISR(INT2_vect)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	e2.count_encoder++;
     9f8:	ec e5       	ldi	r30, 0x5C	; 92
     9fa:	f2 e0       	ldi	r31, 0x02	; 2
     9fc:	80 81       	ld	r24, Z
     9fe:	91 81       	ldd	r25, Z+1	; 0x01
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
}
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	0f 90       	pop	r0
     a10:	0b be       	out	0x3b, r0	; 59
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <__vector_2>:
ISR(INT1_vect)
{
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	0b b6       	in	r0, 0x3b	; 59
     a28:	0f 92       	push	r0
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	e3.count_encoder++;
     a32:	e6 e5       	ldi	r30, 0x56	; 86
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	9f 91       	pop	r25
     a46:	8f 91       	pop	r24
     a48:	0f 90       	pop	r0
     a4a:	0b be       	out	0x3b, r0	; 59
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_4>:
ISR(INT3_vect)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	0b b6       	in	r0, 0x3b	; 59
     a62:	0f 92       	push	r0
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31
	e4.count_encoder++;
     a6c:	e0 e5       	ldi	r30, 0x50	; 80
     a6e:	f2 e0       	ldi	r31, 0x02	; 2
     a70:	80 81       	ld	r24, Z
     a72:	91 81       	ldd	r25, Z+1	; 0x01
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
}
     a7a:	ff 91       	pop	r31
     a7c:	ef 91       	pop	r30
     a7e:	9f 91       	pop	r25
     a80:	8f 91       	pop	r24
     a82:	0f 90       	pop	r0
     a84:	0b be       	out	0x3b, r0	; 59
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <__vector_23>:
ISR(TIMER0_OVF_vect)
{
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	0b b6       	in	r0, 0x3b	; 59
     a9c:	0f 92       	push	r0
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
	e1.speed = e1.count_encoder;
     ac6:	0f 2e       	mov	r0, r31
     ac8:	f2 e6       	ldi	r31, 0x62	; 98
     aca:	cf 2e       	mov	r12, r31
     acc:	f2 e0       	ldi	r31, 0x02	; 2
     ace:	df 2e       	mov	r13, r31
     ad0:	f0 2d       	mov	r31, r0
     ad2:	f6 01       	movw	r30, r12
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	07 2e       	mov	r0, r23
     ada:	00 0c       	add	r0, r0
     adc:	88 0b       	sbc	r24, r24
     ade:	99 0b       	sbc	r25, r25
     ae0:	d4 d4       	rcall	.+2472   	; 0x148a <__floatsisf>
     ae2:	f6 01       	movw	r30, r12
     ae4:	62 83       	std	Z+2, r22	; 0x02
     ae6:	73 83       	std	Z+3, r23	; 0x03
     ae8:	84 83       	std	Z+4, r24	; 0x04
     aea:	95 83       	std	Z+5, r25	; 0x05
	e2.speed = e2.count_encoder;
     aec:	0f 2e       	mov	r0, r31
     aee:	fc e5       	ldi	r31, 0x5C	; 92
     af0:	ef 2e       	mov	r14, r31
     af2:	f2 e0       	ldi	r31, 0x02	; 2
     af4:	ff 2e       	mov	r15, r31
     af6:	f0 2d       	mov	r31, r0
     af8:	f7 01       	movw	r30, r14
     afa:	60 81       	ld	r22, Z
     afc:	71 81       	ldd	r23, Z+1	; 0x01
     afe:	07 2e       	mov	r0, r23
     b00:	00 0c       	add	r0, r0
     b02:	88 0b       	sbc	r24, r24
     b04:	99 0b       	sbc	r25, r25
     b06:	c1 d4       	rcall	.+2434   	; 0x148a <__floatsisf>
     b08:	f7 01       	movw	r30, r14
     b0a:	62 83       	std	Z+2, r22	; 0x02
     b0c:	73 83       	std	Z+3, r23	; 0x03
     b0e:	84 83       	std	Z+4, r24	; 0x04
     b10:	95 83       	std	Z+5, r25	; 0x05
	e3.speed = e3.count_encoder;
     b12:	06 e5       	ldi	r16, 0x56	; 86
     b14:	12 e0       	ldi	r17, 0x02	; 2
     b16:	f8 01       	movw	r30, r16
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	07 2e       	mov	r0, r23
     b1e:	00 0c       	add	r0, r0
     b20:	88 0b       	sbc	r24, r24
     b22:	99 0b       	sbc	r25, r25
     b24:	b2 d4       	rcall	.+2404   	; 0x148a <__floatsisf>
     b26:	f8 01       	movw	r30, r16
     b28:	62 83       	std	Z+2, r22	; 0x02
     b2a:	73 83       	std	Z+3, r23	; 0x03
     b2c:	84 83       	std	Z+4, r24	; 0x04
     b2e:	95 83       	std	Z+5, r25	; 0x05
	e4.speed = e4.count_encoder;
     b30:	c0 e5       	ldi	r28, 0x50	; 80
     b32:	d2 e0       	ldi	r29, 0x02	; 2
     b34:	68 81       	ld	r22, Y
     b36:	79 81       	ldd	r23, Y+1	; 0x01
     b38:	07 2e       	mov	r0, r23
     b3a:	00 0c       	add	r0, r0
     b3c:	88 0b       	sbc	r24, r24
     b3e:	99 0b       	sbc	r25, r25
     b40:	a4 d4       	rcall	.+2376   	; 0x148a <__floatsisf>
     b42:	6a 83       	std	Y+2, r22	; 0x02
     b44:	7b 83       	std	Y+3, r23	; 0x03
     b46:	8c 83       	std	Y+4, r24	; 0x04
     b48:	9d 83       	std	Y+5, r25	; 0x05
	e1.count_encoder = 0;
     b4a:	f6 01       	movw	r30, r12
     b4c:	11 82       	std	Z+1, r1	; 0x01
     b4e:	10 82       	st	Z, r1
	e2.count_encoder = 0;
     b50:	f7 01       	movw	r30, r14
     b52:	11 82       	std	Z+1, r1	; 0x01
     b54:	10 82       	st	Z, r1
	e3.count_encoder = 0;
     b56:	f8 01       	movw	r30, r16
     b58:	11 82       	std	Z+1, r1	; 0x01
     b5a:	10 82       	st	Z, r1
	e4.count_encoder = 0;
     b5c:	19 82       	std	Y+1, r1	; 0x01
     b5e:	18 82       	st	Y, r1
	
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <_GLOBAL__sub_I_kp>:
extern Motor m1,m2,m3,m4;
extern encoder e1,e2,e3,e4;

double kp = 1  , ki , kd = 5 ;

struct pid
     b96:	8a e0       	ldi	r24, 0x0A	; 10
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <ma+0xd>
     b9e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <ma+0xc>
     ba2:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <mb+0xd>
     ba6:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <mb+0xc>
     baa:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <mc+0xd>
     bae:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <mc+0xc>
     bb2:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <md+0xd>
     bb6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <md+0xc>
		
		float speed;
		encoder()
		{
			
			count_encoder= 0;
     bba:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <e1+0x1>
     bbe:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <e1>
			Init_encoder_interrupt();
     bc2:	82 e6       	ldi	r24, 0x62	; 98
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	cf da       	rcall	.-2658   	; 0x166 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     bc8:	82 e6       	ldi	r24, 0x62	; 98
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	d4 da       	rcall	.-2648   	; 0x176 <_ZN7encoder10Init_timerEv>
		
		float speed;
		encoder()
		{
			
			count_encoder= 0;
     bce:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <e2+0x1>
     bd2:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <e2>
			Init_encoder_interrupt();
     bd6:	8c e5       	ldi	r24, 0x5C	; 92
			Init_timer();
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	c5 da       	rcall	.-2678   	; 0x166 <_ZN7encoder22Init_encoder_interruptEv>
     bdc:	8c e5       	ldi	r24, 0x5C	; 92
     bde:	92 e0       	ldi	r25, 0x02	; 2
		
		float speed;
		encoder()
		{
			
			count_encoder= 0;
     be0:	ca da       	rcall	.-2668   	; 0x176 <_ZN7encoder10Init_timerEv>
     be2:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <e3+0x1>
			Init_encoder_interrupt();
     be6:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <e3>
     bea:	86 e5       	ldi	r24, 0x56	; 86
			Init_timer();
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	bb da       	rcall	.-2698   	; 0x166 <_ZN7encoder22Init_encoder_interruptEv>
     bf0:	86 e5       	ldi	r24, 0x56	; 86
		
		float speed;
		encoder()
		{
			
			count_encoder= 0;
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	c0 da       	rcall	.-2688   	; 0x176 <_ZN7encoder10Init_timerEv>
			Init_encoder_interrupt();
     bf6:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <e4+0x1>
     bfa:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <e4>
			Init_timer();
     bfe:	80 e5       	ldi	r24, 0x50	; 80
     c00:	92 e0       	ldi	r25, 0x02	; 2

#define F_CPU 16000000UL


encoder e1,e2,e3,e4;
Motor m1(1) , m2(2) , m3(3) , m4(4);
     c02:	b1 da       	rcall	.-2718   	; 0x166 <_ZN7encoder22Init_encoder_interruptEv>
     c04:	80 e5       	ldi	r24, 0x50	; 80
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	b6 da       	rcall	.-2708   	; 0x176 <_ZN7encoder10Init_timerEv>
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	8f e4       	ldi	r24, 0x4F	; 79
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	ba da       	rcall	.-2700   	; 0x186 <_ZN5MotorC1Eh>
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	8e e4       	ldi	r24, 0x4E	; 78
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	b6 da       	rcall	.-2708   	; 0x186 <_ZN5MotorC1Eh>
     c1a:	63 e0       	ldi	r22, 0x03	; 3
     c1c:	8d e4       	ldi	r24, 0x4D	; 77
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	b2 da       	rcall	.-2716   	; 0x186 <_ZN5MotorC1Eh>
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	8c e4       	ldi	r24, 0x4C	; 76
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	ae ca       	rjmp	.-2724   	; 0x186 <_ZN5MotorC1Eh>
     c2a:	08 95       	ret

00000c2c <_ZN5Motor7InitPWMEv>:
#include "uart.h"


void Motor::InitPWM()
{
	if (num==1)
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	f1 f4       	brne	.+60     	; 0xc70 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     c34:	e7 e0       	ldi	r30, 0x07	; 7
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	80 81       	ld	r24, Z
     c3a:	80 64       	ori	r24, 0x40	; 64
     c3c:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     c3e:	80 81       	ld	r24, Z
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     c44:	ea e0       	ldi	r30, 0x0A	; 10
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	80 81       	ld	r24, Z
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     c4e:	e0 e2       	ldi	r30, 0x20	; 32
     c50:	f1 e0       	ldi	r31, 0x01	; 1
     c52:	80 81       	ld	r24, Z
     c54:	8a 60       	ori	r24, 0x0A	; 10
     c56:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     c58:	e1 e2       	ldi	r30, 0x21	; 33
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	80 81       	ld	r24, Z
     c5e:	8a 61       	ori	r24, 0x1A	; 26
     c60:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     c62:	89 ef       	ldi	r24, 0xF9	; 249
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     c6a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     c6e:	08 95       	ret
	}
	else if(num==2)
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	f1 f4       	brne	.+60     	; 0xcb0 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     c74:	e7 e0       	ldi	r30, 0x07	; 7
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     c7e:	80 81       	ld	r24, Z
     c80:	88 60       	ori	r24, 0x08	; 8
     c82:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     c84:	ea e0       	ldi	r30, 0x0A	; 10
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	80 81       	ld	r24, Z
     c8a:	88 60       	ori	r24, 0x08	; 8
     c8c:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     c8e:	e0 e2       	ldi	r30, 0x20	; 32
     c90:	f1 e0       	ldi	r31, 0x01	; 1
     c92:	80 81       	ld	r24, Z
     c94:	82 68       	ori	r24, 0x82	; 130
     c96:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     c98:	e1 e2       	ldi	r30, 0x21	; 33
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	80 81       	ld	r24, Z
     c9e:	8a 61       	ori	r24, 0x1A	; 26
     ca0:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     ca2:	89 ef       	ldi	r24, 0xF9	; 249
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     caa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     cae:	08 95       	ret
	}
	else if(num==3)
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	f1 f4       	brne	.+60     	; 0xcf0 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     cb4:	e7 e0       	ldi	r30, 0x07	; 7
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	80 81       	ld	r24, Z
     cba:	80 61       	ori	r24, 0x10	; 16
     cbc:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     cbe:	80 81       	ld	r24, Z
     cc0:	80 62       	ori	r24, 0x20	; 32
     cc2:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     cc4:	ea e0       	ldi	r30, 0x0A	; 10
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	80 81       	ld	r24, Z
     cca:	80 61       	ori	r24, 0x10	; 16
     ccc:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     cce:	e0 e2       	ldi	r30, 0x20	; 32
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	80 81       	ld	r24, Z
     cd4:	82 62       	ori	r24, 0x22	; 34
     cd6:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     cd8:	e1 e2       	ldi	r30, 0x21	; 33
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	80 81       	ld	r24, Z
     cde:	8a 61       	ori	r24, 0x1A	; 26
     ce0:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     ce2:	89 ef       	ldi	r24, 0xF9	; 249
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     cea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     cee:	08 95       	ret
	} 
	else if(num==4)
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	e9 f4       	brne	.+58     	; 0xd2e <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
     cf4:	e7 e0       	ldi	r30, 0x07	; 7
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     cfe:	80 81       	ld	r24, Z
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	f1 e0       	ldi	r31, 0x01	; 1
     d08:	80 81       	ld	r24, Z
     d0a:	88 60       	ori	r24, 0x08	; 8
     d0c:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     d0e:	e0 ea       	ldi	r30, 0xA0	; 160
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	82 68       	ori	r24, 0x82	; 130
     d16:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     d18:	e1 ea       	ldi	r30, 0xA1	; 161
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8a 61       	ori	r24, 0x1A	; 26
     d20:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     d22:	89 ef       	ldi	r24, 0xF9	; 249
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     d2a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     d2e:	08 95       	ret

00000d30 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     d30:	fc 01       	movw	r30, r24
     d32:	80 81       	ld	r24, Z
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	91 f0       	breq	.+36     	; 0xd5c <_ZN5Motor19SetForwardDirectionEv+0x2c>
     d38:	18 f4       	brcc	.+6      	; 0xd40 <_ZN5Motor19SetForwardDirectionEv+0x10>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	31 f0       	breq	.+12     	; 0xd4a <_ZN5Motor19SetForwardDirectionEv+0x1a>
     d3e:	08 95       	ret
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	a9 f0       	breq	.+42     	; 0xd6e <_ZN5Motor19SetForwardDirectionEv+0x3e>
     d44:	84 30       	cpi	r24, 0x04	; 4
     d46:	e1 f0       	breq	.+56     	; 0xd80 <_ZN5Motor19SetForwardDirectionEv+0x50>
     d48:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     d4a:	e8 e0       	ldi	r30, 0x08	; 8
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     d54:	80 81       	ld	r24, Z
     d56:	8f 77       	andi	r24, 0x7F	; 127
     d58:	80 83       	st	Z, r24
			break;
     d5a:	08 95       	ret
		case 2:
			SET		(DD_F2);
     d5c:	e8 e0       	ldi	r30, 0x08	; 8
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	80 81       	ld	r24, Z
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     d66:	80 81       	ld	r24, Z
     d68:	87 7f       	andi	r24, 0xF7	; 247
     d6a:	80 83       	st	Z, r24
			break;
     d6c:	08 95       	ret
		case 3:
			SET		(DD_F3);
     d6e:	e8 e0       	ldi	r30, 0x08	; 8
     d70:	f1 e0       	ldi	r31, 0x01	; 1
     d72:	80 81       	ld	r24, Z
     d74:	80 61       	ori	r24, 0x10	; 16
     d76:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     d78:	80 81       	ld	r24, Z
     d7a:	8f 7d       	andi	r24, 0xDF	; 223
     d7c:	80 83       	st	Z, r24
			break;
     d7e:	08 95       	ret
		case 4:
			SET		(DD_F4);
     d80:	e8 e0       	ldi	r30, 0x08	; 8
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     d8a:	80 81       	ld	r24, Z
     d8c:	8d 7f       	andi	r24, 0xFD	; 253
     d8e:	80 83       	st	Z, r24
     d90:	08 95       	ret

00000d92 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	91 f0       	breq	.+36     	; 0xdbe <_ZN5Motor19SetReverseDirectionEv+0x2c>
     d9a:	18 f4       	brcc	.+6      	; 0xda2 <_ZN5Motor19SetReverseDirectionEv+0x10>
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	31 f0       	breq	.+12     	; 0xdac <_ZN5Motor19SetReverseDirectionEv+0x1a>
     da0:	08 95       	ret
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	a9 f0       	breq	.+42     	; 0xdd0 <_ZN5Motor19SetReverseDirectionEv+0x3e>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	e1 f0       	breq	.+56     	; 0xde2 <_ZN5Motor19SetReverseDirectionEv+0x50>
     daa:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     dac:	e8 e0       	ldi	r30, 0x08	; 8
     dae:	f1 e0       	ldi	r31, 0x01	; 1
     db0:	80 81       	ld	r24, Z
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	80 83       	st	Z, r24
			SET		(DD_B1);
     db6:	80 81       	ld	r24, Z
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	80 83       	st	Z, r24
			break;
     dbc:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     dbe:	e8 e0       	ldi	r30, 0x08	; 8
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	80 81       	ld	r24, Z
     dc4:	8b 7f       	andi	r24, 0xFB	; 251
     dc6:	80 83       	st	Z, r24
			SET		(DD_B2);
     dc8:	80 81       	ld	r24, Z
     dca:	88 60       	ori	r24, 0x08	; 8
     dcc:	80 83       	st	Z, r24
			break;
     dce:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     dd0:	e8 e0       	ldi	r30, 0x08	; 8
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	80 81       	ld	r24, Z
     dd6:	8f 7e       	andi	r24, 0xEF	; 239
     dd8:	80 83       	st	Z, r24
			SET		(DD_B3);
     dda:	80 81       	ld	r24, Z
     ddc:	80 62       	ori	r24, 0x20	; 32
     dde:	80 83       	st	Z, r24
			break;
     de0:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     de2:	e8 e0       	ldi	r30, 0x08	; 8
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	80 81       	ld	r24, Z
     de8:	8e 7f       	andi	r24, 0xFE	; 254
     dea:	80 83       	st	Z, r24
			SET		(DD_B4);
     dec:	80 81       	ld	r24, Z
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	80 83       	st	Z, r24
     df2:	08 95       	ret

00000df4 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     df4:	fc 01       	movw	r30, r24
     df6:	80 81       	ld	r24, Z
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	b1 f0       	breq	.+44     	; 0xe28 <_ZN5Motor9StopMotorEv+0x34>
     dfc:	18 f4       	brcc	.+6      	; 0xe04 <_ZN5Motor9StopMotorEv+0x10>
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	31 f0       	breq	.+12     	; 0xe0e <_ZN5Motor9StopMotorEv+0x1a>
     e02:	08 95       	ret
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	e9 f0       	breq	.+58     	; 0xe42 <_ZN5Motor9StopMotorEv+0x4e>
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	41 f1       	breq	.+80     	; 0xe5c <_ZN5Motor9StopMotorEv+0x68>
     e0c:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     e0e:	e8 e0       	ldi	r30, 0x08	; 8
     e10:	f1 e0       	ldi	r31, 0x01	; 1
     e12:	80 81       	ld	r24, Z
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     e18:	80 81       	ld	r24, Z
     e1a:	8f 77       	andi	r24, 0x7F	; 127
     e1c:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     e1e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     e22:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     e26:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     e28:	e8 e0       	ldi	r30, 0x08	; 8
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	80 81       	ld	r24, Z
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     e32:	80 81       	ld	r24, Z
     e34:	87 7f       	andi	r24, 0xF7	; 247
     e36:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     e38:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     e3c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     e40:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     e42:	e8 e0       	ldi	r30, 0x08	; 8
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	80 81       	ld	r24, Z
     e48:	8f 7e       	andi	r24, 0xEF	; 239
     e4a:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     e52:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     e56:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     e5a:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     e5c:	e8 e0       	ldi	r30, 0x08	; 8
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     e66:	80 81       	ld	r24, Z
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     e6c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     e70:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     e74:	08 95       	ret

00000e76 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	8c 01       	movw	r16, r24
     e80:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     e82:	1c 16       	cp	r1, r28
     e84:	1d 06       	cpc	r1, r29
        SetForwardDirection();
     e86:	0c f4       	brge	.+2      	; 0xe8a <_ZN5Motor11SetOcrValueEi+0x14>
	if( Ocr >= MAX_VALUE)
     e88:	53 df       	rcall	.-346    	; 0xd30 <_ZN5Motor19SetForwardDirectionEv>
     e8a:	c9 3f       	cpi	r28, 0xF9	; 249
     e8c:	d1 05       	cpc	r29, r1
		Ocr = MAX_VALUE;
	if( Ocr < 0)
     e8e:	44 f4       	brge	.+16     	; 0xea0 <_ZN5Motor11SetOcrValueEi+0x2a>
     e90:	dd 23       	and	r29, r29
	{
        Ocr = -Ocr;
     e92:	44 f4       	brge	.+16     	; 0xea4 <_ZN5Motor11SetOcrValueEi+0x2e>
     e94:	d1 95       	neg	r29
        SetReverseDirection();
     e96:	c1 95       	neg	r28
     e98:	d1 09       	sbc	r29, r1
     e9a:	c8 01       	movw	r24, r16
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
     e9c:	7a df       	rcall	.-268    	; 0xd92 <_ZN5Motor19SetReverseDirectionEv>
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <_ZN5Motor11SetOcrValueEi+0x2e>
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
     ea0:	c9 ef       	ldi	r28, 0xF9	; 249
     ea2:	d0 e0       	ldi	r29, 0x00	; 0
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	71 f0       	breq	.+28     	; 0xec8 <_ZN5Motor11SetOcrValueEi+0x52>
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <_ZN5Motor11SetOcrValueEi+0x3e>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	31 f0       	breq	.+12     	; 0xebe <_ZN5Motor11SetOcrValueEi+0x48>
     eb2:	18 c0       	rjmp	.+48     	; 0xee4 <_ZN5Motor11SetOcrValueEi+0x6e>
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	69 f0       	breq	.+26     	; 0xed2 <_ZN5Motor11SetOcrValueEi+0x5c>
     eb8:	84 30       	cpi	r24, 0x04	; 4
	{
		case 1:
			PWM_OCR1	= Ocr;
     eba:	81 f0       	breq	.+32     	; 0xedc <_ZN5Motor11SetOcrValueEi+0x66>
     ebc:	13 c0       	rjmp	.+38     	; 0xee4 <_ZN5Motor11SetOcrValueEi+0x6e>
     ebe:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
			break;
     ec2:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		case 2:
			PWM_OCR2	= Ocr;
     ec6:	0e c0       	rjmp	.+28     	; 0xee4 <_ZN5Motor11SetOcrValueEi+0x6e>
     ec8:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
			break;
     ecc:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		case 3:
			PWM_OCR3	= Ocr;
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <_ZN5Motor11SetOcrValueEi+0x6e>
     ed2:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
			break;
     ed6:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		case 4:
			PWM_OCR4	= Ocr;
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <_ZN5Motor11SetOcrValueEi+0x6e>
     edc:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
			break;
	}
}
     ee0:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	0b b6       	in	r0, 0x3b	; 59
     efa:	0f 92       	push	r0
     efc:	2f 93       	push	r18
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
     f06:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     f0a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     f0e:	88 71       	andi	r24, 0x18	; 24
     f10:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <_ZL12UART0_RxHead>
     f14:	ef 5f       	subi	r30, 0xFF	; 255
     f16:	ef 71       	andi	r30, 0x1F	; 31
     f18:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <_ZL12UART0_RxTail>
     f1c:	e9 17       	cp	r30, r25
     f1e:	39 f0       	breq	.+14     	; 0xf2e <__vector_25+0x40>
     f20:	e0 93 8f 03 	sts	0x038F, r30	; 0x80038f <_ZL12UART0_RxHead>
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	ee 56       	subi	r30, 0x6E	; 110
     f28:	fc 4f       	sbci	r31, 0xFC	; 252
     f2a:	20 83       	st	Z, r18
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <__vector_25+0x42>
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZL17UART0_LastRxError>
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0b be       	out	0x3b, r0	; 59
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_26>:
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	0b b6       	in	r0, 0x3b	; 59
     f58:	0f 92       	push	r0
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <_ZL12UART0_TxHead>
     f66:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZL12UART0_TxTail>
     f6a:	98 17       	cp	r25, r24
     f6c:	69 f0       	breq	.+26     	; 0xf88 <__vector_26+0x3c>
     f6e:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <_ZL12UART0_TxTail>
     f72:	ef 5f       	subi	r30, 0xFF	; 255
     f74:	ef 71       	andi	r30, 0x1F	; 31
     f76:	e0 93 90 03 	sts	0x0390, r30	; 0x800390 <_ZL12UART0_TxTail>
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	ee 54       	subi	r30, 0x4E	; 78
     f7e:	fc 4f       	sbci	r31, 0xFC	; 252
     f80:	80 81       	ld	r24, Z
     f82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__vector_26+0x46>
     f88:	e1 ec       	ldi	r30, 0xC1	; 193
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	80 83       	st	Z, r24
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <_Z10uart0_initj>:
     fa8:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZL12UART0_TxHead>
     fac:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZL12UART0_TxTail>
     fb0:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <_ZL12UART0_RxHead>
     fb4:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <_ZL12UART0_RxTail>
     fb8:	99 23       	and	r25, r25
     fba:	24 f4       	brge	.+8      	; 0xfc4 <_Z10uart0_initj+0x1c>
     fbc:	22 e0       	ldi	r18, 0x02	; 2
     fbe:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     fc2:	9f 77       	andi	r25, 0x7F	; 127
     fc4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     fc8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     fcc:	88 e9       	ldi	r24, 0x98	; 152
     fce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     fd2:	86 e0       	ldi	r24, 0x06	; 6
     fd4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     fd8:	08 95       	ret

00000fda <_Z10uart0_getcv>:
     fda:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <_ZL12UART0_RxHead>
     fde:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <_ZL12UART0_RxTail>
     fe2:	98 17       	cp	r25, r24
     fe4:	91 f0       	breq	.+36     	; 0x100a <_Z10uart0_getcv+0x30>
     fe6:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <_ZL12UART0_RxTail>
     fea:	ef 5f       	subi	r30, 0xFF	; 255
     fec:	ef 71       	andi	r30, 0x1F	; 31
     fee:	e0 93 8e 03 	sts	0x038E, r30	; 0x80038e <_ZL12UART0_RxTail>
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	ee 56       	subi	r30, 0x6E	; 110
     ff6:	fc 4f       	sbci	r31, 0xFC	; 252
     ff8:	20 81       	ld	r18, Z
     ffa:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL17UART0_LastRxError>
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	98 2f       	mov	r25, r24
    1002:	88 27       	eor	r24, r24
    1004:	82 0f       	add	r24, r18
    1006:	91 1d       	adc	r25, r1
    1008:	08 95       	ret
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	08 95       	ret

00001010 <_Z10uart0_putch>:
    1010:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZL12UART0_TxHead>
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	2f 71       	andi	r18, 0x1F	; 31
    1018:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <_ZL12UART0_TxTail>
    101c:	29 17       	cp	r18, r25
    101e:	e1 f3       	breq	.-8      	; 0x1018 <_Z10uart0_putch+0x8>
    1020:	e2 2f       	mov	r30, r18
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	ee 54       	subi	r30, 0x4E	; 78
    1026:	fc 4f       	sbci	r31, 0xFC	; 252
    1028:	80 83       	st	Z, r24
    102a:	20 93 91 03 	sts	0x0391, r18	; 0x800391 <_ZL12UART0_TxHead>
    102e:	e1 ec       	ldi	r30, 0xC1	; 193
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 62       	ori	r24, 0x20	; 32
    1036:	80 83       	st	Z, r24
    1038:	08 95       	ret

0000103a <_Z10uart0_putsPKc>:
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	88 81       	ld	r24, Y
    1042:	88 23       	and	r24, r24
    1044:	29 f0       	breq	.+10     	; 0x1050 <_Z10uart0_putsPKc+0x16>
    1046:	21 96       	adiw	r28, 0x01	; 1
    1048:	e3 df       	rcall	.-58     	; 0x1010 <_Z10uart0_putch>
    104a:	89 91       	ld	r24, Y+
    104c:	81 11       	cpse	r24, r1
    104e:	fc cf       	rjmp	.-8      	; 0x1048 <_Z10uart0_putsPKc+0xe>
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <__vector_36>:
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	0b b6       	in	r0, 0x3b	; 59
    1062:	0f 92       	push	r0
    1064:	2f 93       	push	r18
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	ef 93       	push	r30
    106c:	ff 93       	push	r31
    106e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1072:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1076:	88 71       	andi	r24, 0x18	; 24
    1078:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <_ZL12UART1_RxHead>
    107c:	ef 5f       	subi	r30, 0xFF	; 255
    107e:	ef 71       	andi	r30, 0x1F	; 31
    1080:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <_ZL12UART1_RxTail>
    1084:	e9 17       	cp	r30, r25
    1086:	39 f0       	breq	.+14     	; 0x1096 <__vector_36+0x40>
    1088:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <_ZL12UART1_RxHead>
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e3 5b       	subi	r30, 0xB3	; 179
    1090:	fc 4f       	sbci	r31, 0xFC	; 252
    1092:	20 83       	st	Z, r18
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <__vector_36+0x42>
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZL17UART1_LastRxError>
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	9f 91       	pop	r25
    10a2:	8f 91       	pop	r24
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0b be       	out	0x3b, r0	; 59
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_37>:
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	0b b6       	in	r0, 0x3b	; 59
    10c0:	0f 92       	push	r0
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <_ZL12UART1_TxHead>
    10ce:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <_ZL12UART1_TxTail>
    10d2:	98 17       	cp	r25, r24
    10d4:	69 f0       	breq	.+26     	; 0x10f0 <__vector_37+0x3c>
    10d6:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <_ZL12UART1_TxTail>
    10da:	ef 5f       	subi	r30, 0xFF	; 255
    10dc:	ef 71       	andi	r30, 0x1F	; 31
    10de:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <_ZL12UART1_TxTail>
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e3 59       	subi	r30, 0x93	; 147
    10e6:	fc 4f       	sbci	r31, 0xFC	; 252
    10e8:	80 81       	ld	r24, Z
    10ea:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <__vector_37+0x46>
    10f0:	e9 ec       	ldi	r30, 0xC9	; 201
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 7d       	andi	r24, 0xDF	; 223
    10f8:	80 83       	st	Z, r24
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	9f 91       	pop	r25
    1100:	8f 91       	pop	r24
    1102:	0f 90       	pop	r0
    1104:	0b be       	out	0x3b, r0	; 59
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <__vector_51>:
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	0b b6       	in	r0, 0x3b	; 59
    111c:	0f 92       	push	r0
    111e:	2f 93       	push	r18
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    112c:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1130:	88 71       	andi	r24, 0x18	; 24
    1132:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <_ZL12UART2_RxHead>
    1136:	ef 5f       	subi	r30, 0xFF	; 255
    1138:	ef 71       	andi	r30, 0x1F	; 31
    113a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZL12UART2_RxTail>
    113e:	e9 17       	cp	r30, r25
    1140:	39 f0       	breq	.+14     	; 0x1150 <__vector_51+0x40>
    1142:	e0 93 05 03 	sts	0x0305, r30	; 0x800305 <_ZL12UART2_RxHead>
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e8 5f       	subi	r30, 0xF8	; 248
    114a:	fc 4f       	sbci	r31, 0xFC	; 252
    114c:	20 83       	st	Z, r18
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <__vector_51+0x42>
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZL17UART2_LastRxError>
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0b be       	out	0x3b, r0	; 59
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_52>:
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	0b b6       	in	r0, 0x3b	; 59
    117a:	0f 92       	push	r0
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31
    1184:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <_ZL12UART2_TxHead>
    1188:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_ZL12UART2_TxTail>
    118c:	98 17       	cp	r25, r24
    118e:	69 f0       	breq	.+26     	; 0x11aa <__vector_52+0x3c>
    1190:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <_ZL12UART2_TxTail>
    1194:	ef 5f       	subi	r30, 0xFF	; 255
    1196:	ef 71       	andi	r30, 0x1F	; 31
    1198:	e0 93 06 03 	sts	0x0306, r30	; 0x800306 <_ZL12UART2_TxTail>
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	e8 5d       	subi	r30, 0xD8	; 216
    11a0:	fc 4f       	sbci	r31, 0xFC	; 252
    11a2:	80 81       	ld	r24, Z
    11a4:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <__vector_52+0x46>
    11aa:	e1 ed       	ldi	r30, 0xD1	; 209
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7d       	andi	r24, 0xDF	; 223
    11b2:	80 83       	st	Z, r24
    11b4:	ff 91       	pop	r31
    11b6:	ef 91       	pop	r30
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	0f 90       	pop	r0
    11be:	0b be       	out	0x3b, r0	; 59
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	2f 93       	push	r18
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    11e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    11e6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    11ea:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    11ec:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <_ZL12UART3_RxHead>
    11f0:	ef 5f       	subi	r30, 0xFF	; 255
    11f2:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    11f4:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <_ZL12UART3_RxTail>
    11f8:	e9 17       	cp	r30, r25
    11fa:	39 f0       	breq	.+14     	; 0x120a <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    11fc:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	ed 53       	subi	r30, 0x3D	; 61
    1204:	fd 4f       	sbci	r31, 0xFD	; 253
    1206:	20 83       	st	Z, r18
    1208:	01 c0       	rjmp	.+2      	; 0x120c <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    120a:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    120c:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <_ZL17UART3_LastRxError>
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0b be       	out	0x3b, r0	; 59
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	0b b6       	in	r0, 0x3b	; 59
    1234:	0f 92       	push	r0
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	ef 93       	push	r30
    123c:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    123e:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <_ZL12UART3_TxHead>
    1242:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <_ZL12UART3_TxTail>
    1246:	98 17       	cp	r25, r24
    1248:	69 f0       	breq	.+26     	; 0x1264 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    124a:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <_ZL12UART3_TxTail>
    124e:	ef 5f       	subi	r30, 0xFF	; 255
    1250:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    1252:	e0 93 c1 02 	sts	0x02C1, r30	; 0x8002c1 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	ed 51       	subi	r30, 0x1D	; 29
    125a:	fd 4f       	sbci	r31, 0xFD	; 253
    125c:	80 81       	ld	r24, Z
    125e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1262:	05 c0       	rjmp	.+10     	; 0x126e <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    1264:	e1 e3       	ldi	r30, 0x31	; 49
    1266:	f1 e0       	ldi	r31, 0x01	; 1
    1268:	80 81       	ld	r24, Z
    126a:	8f 7d       	andi	r24, 0xDF	; 223
    126c:	80 83       	st	Z, r24
	}
}
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	0f 90       	pop	r0
    1278:	0b be       	out	0x3b, r0	; 59
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__subsf3>:
    1284:	50 58       	subi	r21, 0x80	; 128

00001286 <__addsf3>:
    1286:	bb 27       	eor	r27, r27
    1288:	aa 27       	eor	r26, r26
    128a:	0e d0       	rcall	.+28     	; 0x12a8 <__addsf3x>
    128c:	78 c1       	rjmp	.+752    	; 0x157e <__fp_round>
    128e:	41 d1       	rcall	.+642    	; 0x1512 <__fp_pscA>
    1290:	30 f0       	brcs	.+12     	; 0x129e <__addsf3+0x18>
    1292:	46 d1       	rcall	.+652    	; 0x1520 <__fp_pscB>
    1294:	20 f0       	brcs	.+8      	; 0x129e <__addsf3+0x18>
    1296:	31 f4       	brne	.+12     	; 0x12a4 <__addsf3+0x1e>
    1298:	9f 3f       	cpi	r25, 0xFF	; 255
    129a:	11 f4       	brne	.+4      	; 0x12a0 <__addsf3+0x1a>
    129c:	1e f4       	brtc	.+6      	; 0x12a4 <__addsf3+0x1e>
    129e:	36 c1       	rjmp	.+620    	; 0x150c <__fp_nan>
    12a0:	0e f4       	brtc	.+2      	; 0x12a4 <__addsf3+0x1e>
    12a2:	e0 95       	com	r30
    12a4:	e7 fb       	bst	r30, 7
    12a6:	2c c1       	rjmp	.+600    	; 0x1500 <__fp_inf>

000012a8 <__addsf3x>:
    12a8:	e9 2f       	mov	r30, r25
    12aa:	8b d1       	rcall	.+790    	; 0x15c2 <__fp_split3>
    12ac:	80 f3       	brcs	.-32     	; 0x128e <__addsf3+0x8>
    12ae:	ba 17       	cp	r27, r26
    12b0:	62 07       	cpc	r22, r18
    12b2:	73 07       	cpc	r23, r19
    12b4:	84 07       	cpc	r24, r20
    12b6:	95 07       	cpc	r25, r21
    12b8:	18 f0       	brcs	.+6      	; 0x12c0 <__addsf3x+0x18>
    12ba:	71 f4       	brne	.+28     	; 0x12d8 <__addsf3x+0x30>
    12bc:	9e f5       	brtc	.+102    	; 0x1324 <__addsf3x+0x7c>
    12be:	a3 c1       	rjmp	.+838    	; 0x1606 <__fp_zero>
    12c0:	0e f4       	brtc	.+2      	; 0x12c4 <__addsf3x+0x1c>
    12c2:	e0 95       	com	r30
    12c4:	0b 2e       	mov	r0, r27
    12c6:	ba 2f       	mov	r27, r26
    12c8:	a0 2d       	mov	r26, r0
    12ca:	0b 01       	movw	r0, r22
    12cc:	b9 01       	movw	r22, r18
    12ce:	90 01       	movw	r18, r0
    12d0:	0c 01       	movw	r0, r24
    12d2:	ca 01       	movw	r24, r20
    12d4:	a0 01       	movw	r20, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	ff 27       	eor	r31, r31
    12da:	59 1b       	sub	r21, r25
    12dc:	99 f0       	breq	.+38     	; 0x1304 <__addsf3x+0x5c>
    12de:	59 3f       	cpi	r21, 0xF9	; 249
    12e0:	50 f4       	brcc	.+20     	; 0x12f6 <__addsf3x+0x4e>
    12e2:	50 3e       	cpi	r21, 0xE0	; 224
    12e4:	68 f1       	brcs	.+90     	; 0x1340 <__addsf3x+0x98>
    12e6:	1a 16       	cp	r1, r26
    12e8:	f0 40       	sbci	r31, 0x00	; 0
    12ea:	a2 2f       	mov	r26, r18
    12ec:	23 2f       	mov	r18, r19
    12ee:	34 2f       	mov	r19, r20
    12f0:	44 27       	eor	r20, r20
    12f2:	58 5f       	subi	r21, 0xF8	; 248
    12f4:	f3 cf       	rjmp	.-26     	; 0x12dc <__addsf3x+0x34>
    12f6:	46 95       	lsr	r20
    12f8:	37 95       	ror	r19
    12fa:	27 95       	ror	r18
    12fc:	a7 95       	ror	r26
    12fe:	f0 40       	sbci	r31, 0x00	; 0
    1300:	53 95       	inc	r21
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__addsf3x+0x4e>
    1304:	7e f4       	brtc	.+30     	; 0x1324 <__addsf3x+0x7c>
    1306:	1f 16       	cp	r1, r31
    1308:	ba 0b       	sbc	r27, r26
    130a:	62 0b       	sbc	r22, r18
    130c:	73 0b       	sbc	r23, r19
    130e:	84 0b       	sbc	r24, r20
    1310:	ba f0       	brmi	.+46     	; 0x1340 <__addsf3x+0x98>
    1312:	91 50       	subi	r25, 0x01	; 1
    1314:	a1 f0       	breq	.+40     	; 0x133e <__addsf3x+0x96>
    1316:	ff 0f       	add	r31, r31
    1318:	bb 1f       	adc	r27, r27
    131a:	66 1f       	adc	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	88 1f       	adc	r24, r24
    1320:	c2 f7       	brpl	.-16     	; 0x1312 <__addsf3x+0x6a>
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <__addsf3x+0x98>
    1324:	ba 0f       	add	r27, r26
    1326:	62 1f       	adc	r22, r18
    1328:	73 1f       	adc	r23, r19
    132a:	84 1f       	adc	r24, r20
    132c:	48 f4       	brcc	.+18     	; 0x1340 <__addsf3x+0x98>
    132e:	87 95       	ror	r24
    1330:	77 95       	ror	r23
    1332:	67 95       	ror	r22
    1334:	b7 95       	ror	r27
    1336:	f7 95       	ror	r31
    1338:	9e 3f       	cpi	r25, 0xFE	; 254
    133a:	08 f0       	brcs	.+2      	; 0x133e <__addsf3x+0x96>
    133c:	b3 cf       	rjmp	.-154    	; 0x12a4 <__addsf3+0x1e>
    133e:	93 95       	inc	r25
    1340:	88 0f       	add	r24, r24
    1342:	08 f0       	brcs	.+2      	; 0x1346 <__addsf3x+0x9e>
    1344:	99 27       	eor	r25, r25
    1346:	ee 0f       	add	r30, r30
    1348:	97 95       	ror	r25
    134a:	87 95       	ror	r24
    134c:	08 95       	ret

0000134e <cos>:
    134e:	f0 d0       	rcall	.+480    	; 0x1530 <__fp_rempio2>
    1350:	e3 95       	inc	r30
    1352:	26 c1       	rjmp	.+588    	; 0x15a0 <__fp_sinus>

00001354 <__divsf3>:
    1354:	0c d0       	rcall	.+24     	; 0x136e <__divsf3x>
    1356:	13 c1       	rjmp	.+550    	; 0x157e <__fp_round>
    1358:	e3 d0       	rcall	.+454    	; 0x1520 <__fp_pscB>
    135a:	40 f0       	brcs	.+16     	; 0x136c <__divsf3+0x18>
    135c:	da d0       	rcall	.+436    	; 0x1512 <__fp_pscA>
    135e:	30 f0       	brcs	.+12     	; 0x136c <__divsf3+0x18>
    1360:	21 f4       	brne	.+8      	; 0x136a <__divsf3+0x16>
    1362:	5f 3f       	cpi	r21, 0xFF	; 255
    1364:	19 f0       	breq	.+6      	; 0x136c <__divsf3+0x18>
    1366:	cc c0       	rjmp	.+408    	; 0x1500 <__fp_inf>
    1368:	51 11       	cpse	r21, r1
    136a:	4e c1       	rjmp	.+668    	; 0x1608 <__fp_szero>
    136c:	cf c0       	rjmp	.+414    	; 0x150c <__fp_nan>

0000136e <__divsf3x>:
    136e:	29 d1       	rcall	.+594    	; 0x15c2 <__fp_split3>
    1370:	98 f3       	brcs	.-26     	; 0x1358 <__divsf3+0x4>

00001372 <__divsf3_pse>:
    1372:	99 23       	and	r25, r25
    1374:	c9 f3       	breq	.-14     	; 0x1368 <__divsf3+0x14>
    1376:	55 23       	and	r21, r21
    1378:	b1 f3       	breq	.-20     	; 0x1366 <__divsf3+0x12>
    137a:	95 1b       	sub	r25, r21
    137c:	55 0b       	sbc	r21, r21
    137e:	bb 27       	eor	r27, r27
    1380:	aa 27       	eor	r26, r26
    1382:	62 17       	cp	r22, r18
    1384:	73 07       	cpc	r23, r19
    1386:	84 07       	cpc	r24, r20
    1388:	38 f0       	brcs	.+14     	; 0x1398 <__divsf3_pse+0x26>
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	5f 4f       	sbci	r21, 0xFF	; 255
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	44 1f       	adc	r20, r20
    1394:	aa 1f       	adc	r26, r26
    1396:	a9 f3       	breq	.-22     	; 0x1382 <__divsf3_pse+0x10>
    1398:	33 d0       	rcall	.+102    	; 0x1400 <__divsf3_pse+0x8e>
    139a:	0e 2e       	mov	r0, r30
    139c:	3a f0       	brmi	.+14     	; 0x13ac <__divsf3_pse+0x3a>
    139e:	e0 e8       	ldi	r30, 0x80	; 128
    13a0:	30 d0       	rcall	.+96     	; 0x1402 <__divsf3_pse+0x90>
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	e6 95       	lsr	r30
    13a8:	00 1c       	adc	r0, r0
    13aa:	ca f7       	brpl	.-14     	; 0x139e <__divsf3_pse+0x2c>
    13ac:	29 d0       	rcall	.+82     	; 0x1400 <__divsf3_pse+0x8e>
    13ae:	fe 2f       	mov	r31, r30
    13b0:	27 d0       	rcall	.+78     	; 0x1400 <__divsf3_pse+0x8e>
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	bb 1f       	adc	r27, r27
    13ba:	26 17       	cp	r18, r22
    13bc:	37 07       	cpc	r19, r23
    13be:	48 07       	cpc	r20, r24
    13c0:	ab 07       	cpc	r26, r27
    13c2:	b0 e8       	ldi	r27, 0x80	; 128
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__divsf3_pse+0x56>
    13c6:	bb 0b       	sbc	r27, r27
    13c8:	80 2d       	mov	r24, r0
    13ca:	bf 01       	movw	r22, r30
    13cc:	ff 27       	eor	r31, r31
    13ce:	93 58       	subi	r25, 0x83	; 131
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	2a f0       	brmi	.+10     	; 0x13de <__divsf3_pse+0x6c>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	68 f0       	brcs	.+26     	; 0x13f4 <__divsf3_pse+0x82>
    13da:	92 c0       	rjmp	.+292    	; 0x1500 <__fp_inf>
    13dc:	15 c1       	rjmp	.+554    	; 0x1608 <__fp_szero>
    13de:	5f 3f       	cpi	r21, 0xFF	; 255
    13e0:	ec f3       	brlt	.-6      	; 0x13dc <__divsf3_pse+0x6a>
    13e2:	98 3e       	cpi	r25, 0xE8	; 232
    13e4:	dc f3       	brlt	.-10     	; 0x13dc <__divsf3_pse+0x6a>
    13e6:	86 95       	lsr	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f7 95       	ror	r31
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__divsf3_pse+0x74>
    13f4:	88 0f       	add	r24, r24
    13f6:	91 1d       	adc	r25, r1
    13f8:	96 95       	lsr	r25
    13fa:	87 95       	ror	r24
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret
    1400:	e1 e0       	ldi	r30, 0x01	; 1
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	bb 1f       	adc	r27, r27
    140a:	62 17       	cp	r22, r18
    140c:	73 07       	cpc	r23, r19
    140e:	84 07       	cpc	r24, r20
    1410:	ba 07       	cpc	r27, r26
    1412:	20 f0       	brcs	.+8      	; 0x141c <__divsf3_pse+0xaa>
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	84 0b       	sbc	r24, r20
    141a:	ba 0b       	sbc	r27, r26
    141c:	ee 1f       	adc	r30, r30
    141e:	88 f7       	brcc	.-30     	; 0x1402 <__divsf3_pse+0x90>
    1420:	e0 95       	com	r30
    1422:	08 95       	ret

00001424 <__fixsfsi>:
    1424:	04 d0       	rcall	.+8      	; 0x142e <__fixunssfsi>
    1426:	68 94       	set
    1428:	b1 11       	cpse	r27, r1
    142a:	ee c0       	rjmp	.+476    	; 0x1608 <__fp_szero>
    142c:	08 95       	ret

0000142e <__fixunssfsi>:
    142e:	d1 d0       	rcall	.+418    	; 0x15d2 <__fp_splitA>
    1430:	88 f0       	brcs	.+34     	; 0x1454 <__fixunssfsi+0x26>
    1432:	9f 57       	subi	r25, 0x7F	; 127
    1434:	90 f0       	brcs	.+36     	; 0x145a <__fixunssfsi+0x2c>
    1436:	b9 2f       	mov	r27, r25
    1438:	99 27       	eor	r25, r25
    143a:	b7 51       	subi	r27, 0x17	; 23
    143c:	a0 f0       	brcs	.+40     	; 0x1466 <__fixunssfsi+0x38>
    143e:	d1 f0       	breq	.+52     	; 0x1474 <__fixunssfsi+0x46>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	1a f0       	brmi	.+6      	; 0x1450 <__fixunssfsi+0x22>
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__fixunssfsi+0x12>
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <__fixunssfsi+0x46>
    1450:	b1 30       	cpi	r27, 0x01	; 1
    1452:	81 f0       	breq	.+32     	; 0x1474 <__fixunssfsi+0x46>
    1454:	d8 d0       	rcall	.+432    	; 0x1606 <__fp_zero>
    1456:	b1 e0       	ldi	r27, 0x01	; 1
    1458:	08 95       	ret
    145a:	d5 c0       	rjmp	.+426    	; 0x1606 <__fp_zero>
    145c:	67 2f       	mov	r22, r23
    145e:	78 2f       	mov	r23, r24
    1460:	88 27       	eor	r24, r24
    1462:	b8 5f       	subi	r27, 0xF8	; 248
    1464:	39 f0       	breq	.+14     	; 0x1474 <__fixunssfsi+0x46>
    1466:	b9 3f       	cpi	r27, 0xF9	; 249
    1468:	cc f3       	brlt	.-14     	; 0x145c <__fixunssfsi+0x2e>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b3 95       	inc	r27
    1472:	d9 f7       	brne	.-10     	; 0x146a <__fixunssfsi+0x3c>
    1474:	3e f4       	brtc	.+14     	; 0x1484 <__fixunssfsi+0x56>
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	08 95       	ret

00001486 <__floatunsisf>:
    1486:	e8 94       	clt
    1488:	09 c0       	rjmp	.+18     	; 0x149c <__floatsisf+0x12>

0000148a <__floatsisf>:
    148a:	97 fb       	bst	r25, 7
    148c:	3e f4       	brtc	.+14     	; 0x149c <__floatsisf+0x12>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	99 23       	and	r25, r25
    149e:	a9 f0       	breq	.+42     	; 0x14ca <__floatsisf+0x40>
    14a0:	f9 2f       	mov	r31, r25
    14a2:	96 e9       	ldi	r25, 0x96	; 150
    14a4:	bb 27       	eor	r27, r27
    14a6:	93 95       	inc	r25
    14a8:	f6 95       	lsr	r31
    14aa:	87 95       	ror	r24
    14ac:	77 95       	ror	r23
    14ae:	67 95       	ror	r22
    14b0:	b7 95       	ror	r27
    14b2:	f1 11       	cpse	r31, r1
    14b4:	f8 cf       	rjmp	.-16     	; 0x14a6 <__floatsisf+0x1c>
    14b6:	fa f4       	brpl	.+62     	; 0x14f6 <__floatsisf+0x6c>
    14b8:	bb 0f       	add	r27, r27
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__floatsisf+0x36>
    14bc:	60 ff       	sbrs	r22, 0
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <__floatsisf+0x6c>
    14c0:	6f 5f       	subi	r22, 0xFF	; 255
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	16 c0       	rjmp	.+44     	; 0x14f6 <__floatsisf+0x6c>
    14ca:	88 23       	and	r24, r24
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <__floatsisf+0x48>
    14ce:	96 e9       	ldi	r25, 0x96	; 150
    14d0:	11 c0       	rjmp	.+34     	; 0x14f4 <__floatsisf+0x6a>
    14d2:	77 23       	and	r23, r23
    14d4:	21 f0       	breq	.+8      	; 0x14de <__floatsisf+0x54>
    14d6:	9e e8       	ldi	r25, 0x8E	; 142
    14d8:	87 2f       	mov	r24, r23
    14da:	76 2f       	mov	r23, r22
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <__floatsisf+0x5e>
    14de:	66 23       	and	r22, r22
    14e0:	71 f0       	breq	.+28     	; 0x14fe <__floatsisf+0x74>
    14e2:	96 e8       	ldi	r25, 0x86	; 134
    14e4:	86 2f       	mov	r24, r22
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	2a f0       	brmi	.+10     	; 0x14f6 <__floatsisf+0x6c>
    14ec:	9a 95       	dec	r25
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	da f7       	brpl	.-10     	; 0x14ec <__floatsisf+0x62>
    14f6:	88 0f       	add	r24, r24
    14f8:	96 95       	lsr	r25
    14fa:	87 95       	ror	r24
    14fc:	97 f9       	bld	r25, 7
    14fe:	08 95       	ret

00001500 <__fp_inf>:
    1500:	97 f9       	bld	r25, 7
    1502:	9f 67       	ori	r25, 0x7F	; 127
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	08 95       	ret

0000150c <__fp_nan>:
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	80 ec       	ldi	r24, 0xC0	; 192
    1510:	08 95       	ret

00001512 <__fp_pscA>:
    1512:	00 24       	eor	r0, r0
    1514:	0a 94       	dec	r0
    1516:	16 16       	cp	r1, r22
    1518:	17 06       	cpc	r1, r23
    151a:	18 06       	cpc	r1, r24
    151c:	09 06       	cpc	r0, r25
    151e:	08 95       	ret

00001520 <__fp_pscB>:
    1520:	00 24       	eor	r0, r0
    1522:	0a 94       	dec	r0
    1524:	12 16       	cp	r1, r18
    1526:	13 06       	cpc	r1, r19
    1528:	14 06       	cpc	r1, r20
    152a:	05 06       	cpc	r0, r21
    152c:	08 95       	ret
    152e:	ee cf       	rjmp	.-36     	; 0x150c <__fp_nan>

00001530 <__fp_rempio2>:
    1530:	50 d0       	rcall	.+160    	; 0x15d2 <__fp_splitA>
    1532:	e8 f3       	brcs	.-6      	; 0x152e <__fp_pscB+0xe>
    1534:	e8 94       	clt
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	bb 27       	eor	r27, r27
    153a:	9f 57       	subi	r25, 0x7F	; 127
    153c:	f0 f0       	brcs	.+60     	; 0x157a <__fp_rempio2+0x4a>
    153e:	2a ed       	ldi	r18, 0xDA	; 218
    1540:	3f e0       	ldi	r19, 0x0F	; 15
    1542:	49 ec       	ldi	r20, 0xC9	; 201
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <__fp_rempio2+0x22>
    1546:	ee 0f       	add	r30, r30
    1548:	bb 0f       	add	r27, r27
    154a:	66 1f       	adc	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	88 1f       	adc	r24, r24
    1550:	28 f0       	brcs	.+10     	; 0x155c <__fp_rempio2+0x2c>
    1552:	b2 3a       	cpi	r27, 0xA2	; 162
    1554:	62 07       	cpc	r22, r18
    1556:	73 07       	cpc	r23, r19
    1558:	84 07       	cpc	r24, r20
    155a:	28 f0       	brcs	.+10     	; 0x1566 <__fp_rempio2+0x36>
    155c:	b2 5a       	subi	r27, 0xA2	; 162
    155e:	62 0b       	sbc	r22, r18
    1560:	73 0b       	sbc	r23, r19
    1562:	84 0b       	sbc	r24, r20
    1564:	e3 95       	inc	r30
    1566:	9a 95       	dec	r25
    1568:	72 f7       	brpl	.-36     	; 0x1546 <__fp_rempio2+0x16>
    156a:	80 38       	cpi	r24, 0x80	; 128
    156c:	30 f4       	brcc	.+12     	; 0x157a <__fp_rempio2+0x4a>
    156e:	9a 95       	dec	r25
    1570:	bb 0f       	add	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	d2 f7       	brpl	.-12     	; 0x156e <__fp_rempio2+0x3e>
    157a:	90 48       	sbci	r25, 0x80	; 128
    157c:	b6 c0       	rjmp	.+364    	; 0x16ea <__fp_mpack_finite>

0000157e <__fp_round>:
    157e:	09 2e       	mov	r0, r25
    1580:	03 94       	inc	r0
    1582:	00 0c       	add	r0, r0
    1584:	11 f4       	brne	.+4      	; 0x158a <__fp_round+0xc>
    1586:	88 23       	and	r24, r24
    1588:	52 f0       	brmi	.+20     	; 0x159e <__fp_round+0x20>
    158a:	bb 0f       	add	r27, r27
    158c:	40 f4       	brcc	.+16     	; 0x159e <__fp_round+0x20>
    158e:	bf 2b       	or	r27, r31
    1590:	11 f4       	brne	.+4      	; 0x1596 <__fp_round+0x18>
    1592:	60 ff       	sbrs	r22, 0
    1594:	04 c0       	rjmp	.+8      	; 0x159e <__fp_round+0x20>
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <__fp_sinus>:
    15a0:	ef 93       	push	r30
    15a2:	e0 ff       	sbrs	r30, 0
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <__fp_sinus+0x12>
    15a6:	a2 ea       	ldi	r26, 0xA2	; 162
    15a8:	2a ed       	ldi	r18, 0xDA	; 218
    15aa:	3f e0       	ldi	r19, 0x0F	; 15
    15ac:	49 ec       	ldi	r20, 0xC9	; 201
    15ae:	5f eb       	ldi	r21, 0xBF	; 191
    15b0:	7b de       	rcall	.-778    	; 0x12a8 <__addsf3x>
    15b2:	e5 df       	rcall	.-54     	; 0x157e <__fp_round>
    15b4:	0f 90       	pop	r0
    15b6:	03 94       	inc	r0
    15b8:	01 fc       	sbrc	r0, 1
    15ba:	90 58       	subi	r25, 0x80	; 128
    15bc:	e4 ee       	ldi	r30, 0xE4	; 228
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	a0 c0       	rjmp	.+320    	; 0x1702 <__fp_powsodd>

000015c2 <__fp_split3>:
    15c2:	57 fd       	sbrc	r21, 7
    15c4:	90 58       	subi	r25, 0x80	; 128
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <__fp_splitA+0x10>
    15cc:	5f 3f       	cpi	r21, 0xFF	; 255
    15ce:	71 f0       	breq	.+28     	; 0x15ec <__fp_splitA+0x1a>
    15d0:	47 95       	ror	r20

000015d2 <__fp_splitA>:
    15d2:	88 0f       	add	r24, r24
    15d4:	97 fb       	bst	r25, 7
    15d6:	99 1f       	adc	r25, r25
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <__fp_splitA+0x20>
    15da:	9f 3f       	cpi	r25, 0xFF	; 255
    15dc:	79 f0       	breq	.+30     	; 0x15fc <__fp_splitA+0x2a>
    15de:	87 95       	ror	r24
    15e0:	08 95       	ret
    15e2:	12 16       	cp	r1, r18
    15e4:	13 06       	cpc	r1, r19
    15e6:	14 06       	cpc	r1, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	f2 cf       	rjmp	.-28     	; 0x15d0 <__fp_split3+0xe>
    15ec:	46 95       	lsr	r20
    15ee:	f1 df       	rcall	.-30     	; 0x15d2 <__fp_splitA>
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <__fp_splitA+0x30>
    15f2:	16 16       	cp	r1, r22
    15f4:	17 06       	cpc	r1, r23
    15f6:	18 06       	cpc	r1, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	f1 cf       	rjmp	.-30     	; 0x15de <__fp_splitA+0xc>
    15fc:	86 95       	lsr	r24
    15fe:	71 05       	cpc	r23, r1
    1600:	61 05       	cpc	r22, r1
    1602:	08 94       	sec
    1604:	08 95       	ret

00001606 <__fp_zero>:
    1606:	e8 94       	clt

00001608 <__fp_szero>:
    1608:	bb 27       	eor	r27, r27
    160a:	66 27       	eor	r22, r22
    160c:	77 27       	eor	r23, r23
    160e:	cb 01       	movw	r24, r22
    1610:	97 f9       	bld	r25, 7
    1612:	08 95       	ret

00001614 <__mulsf3>:
    1614:	0b d0       	rcall	.+22     	; 0x162c <__mulsf3x>
    1616:	b3 cf       	rjmp	.-154    	; 0x157e <__fp_round>
    1618:	7c df       	rcall	.-264    	; 0x1512 <__fp_pscA>
    161a:	28 f0       	brcs	.+10     	; 0x1626 <__mulsf3+0x12>
    161c:	81 df       	rcall	.-254    	; 0x1520 <__fp_pscB>
    161e:	18 f0       	brcs	.+6      	; 0x1626 <__mulsf3+0x12>
    1620:	95 23       	and	r25, r21
    1622:	09 f0       	breq	.+2      	; 0x1626 <__mulsf3+0x12>
    1624:	6d cf       	rjmp	.-294    	; 0x1500 <__fp_inf>
    1626:	72 cf       	rjmp	.-284    	; 0x150c <__fp_nan>
    1628:	11 24       	eor	r1, r1
    162a:	ee cf       	rjmp	.-36     	; 0x1608 <__fp_szero>

0000162c <__mulsf3x>:
    162c:	ca df       	rcall	.-108    	; 0x15c2 <__fp_split3>
    162e:	a0 f3       	brcs	.-24     	; 0x1618 <__mulsf3+0x4>

00001630 <__mulsf3_pse>:
    1630:	95 9f       	mul	r25, r21
    1632:	d1 f3       	breq	.-12     	; 0x1628 <__mulsf3+0x14>
    1634:	95 0f       	add	r25, r21
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	55 1f       	adc	r21, r21
    163a:	62 9f       	mul	r22, r18
    163c:	f0 01       	movw	r30, r0
    163e:	72 9f       	mul	r23, r18
    1640:	bb 27       	eor	r27, r27
    1642:	f0 0d       	add	r31, r0
    1644:	b1 1d       	adc	r27, r1
    1646:	63 9f       	mul	r22, r19
    1648:	aa 27       	eor	r26, r26
    164a:	f0 0d       	add	r31, r0
    164c:	b1 1d       	adc	r27, r1
    164e:	aa 1f       	adc	r26, r26
    1650:	64 9f       	mul	r22, r20
    1652:	66 27       	eor	r22, r22
    1654:	b0 0d       	add	r27, r0
    1656:	a1 1d       	adc	r26, r1
    1658:	66 1f       	adc	r22, r22
    165a:	82 9f       	mul	r24, r18
    165c:	22 27       	eor	r18, r18
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	62 1f       	adc	r22, r18
    1664:	73 9f       	mul	r23, r19
    1666:	b0 0d       	add	r27, r0
    1668:	a1 1d       	adc	r26, r1
    166a:	62 1f       	adc	r22, r18
    166c:	83 9f       	mul	r24, r19
    166e:	a0 0d       	add	r26, r0
    1670:	61 1d       	adc	r22, r1
    1672:	22 1f       	adc	r18, r18
    1674:	74 9f       	mul	r23, r20
    1676:	33 27       	eor	r19, r19
    1678:	a0 0d       	add	r26, r0
    167a:	61 1d       	adc	r22, r1
    167c:	23 1f       	adc	r18, r19
    167e:	84 9f       	mul	r24, r20
    1680:	60 0d       	add	r22, r0
    1682:	21 1d       	adc	r18, r1
    1684:	82 2f       	mov	r24, r18
    1686:	76 2f       	mov	r23, r22
    1688:	6a 2f       	mov	r22, r26
    168a:	11 24       	eor	r1, r1
    168c:	9f 57       	subi	r25, 0x7F	; 127
    168e:	50 40       	sbci	r21, 0x00	; 0
    1690:	8a f0       	brmi	.+34     	; 0x16b4 <__mulsf3_pse+0x84>
    1692:	e1 f0       	breq	.+56     	; 0x16cc <__mulsf3_pse+0x9c>
    1694:	88 23       	and	r24, r24
    1696:	4a f0       	brmi	.+18     	; 0x16aa <__mulsf3_pse+0x7a>
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	bb 1f       	adc	r27, r27
    169e:	66 1f       	adc	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	88 1f       	adc	r24, r24
    16a4:	91 50       	subi	r25, 0x01	; 1
    16a6:	50 40       	sbci	r21, 0x00	; 0
    16a8:	a9 f7       	brne	.-22     	; 0x1694 <__mulsf3_pse+0x64>
    16aa:	9e 3f       	cpi	r25, 0xFE	; 254
    16ac:	51 05       	cpc	r21, r1
    16ae:	70 f0       	brcs	.+28     	; 0x16cc <__mulsf3_pse+0x9c>
    16b0:	27 cf       	rjmp	.-434    	; 0x1500 <__fp_inf>
    16b2:	aa cf       	rjmp	.-172    	; 0x1608 <__fp_szero>
    16b4:	5f 3f       	cpi	r21, 0xFF	; 255
    16b6:	ec f3       	brlt	.-6      	; 0x16b2 <__mulsf3_pse+0x82>
    16b8:	98 3e       	cpi	r25, 0xE8	; 232
    16ba:	dc f3       	brlt	.-10     	; 0x16b2 <__mulsf3_pse+0x82>
    16bc:	86 95       	lsr	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b7 95       	ror	r27
    16c4:	f7 95       	ror	r31
    16c6:	e7 95       	ror	r30
    16c8:	9f 5f       	subi	r25, 0xFF	; 255
    16ca:	c1 f7       	brne	.-16     	; 0x16bc <__mulsf3_pse+0x8c>
    16cc:	fe 2b       	or	r31, r30
    16ce:	88 0f       	add	r24, r24
    16d0:	91 1d       	adc	r25, r1
    16d2:	96 95       	lsr	r25
    16d4:	87 95       	ror	r24
    16d6:	97 f9       	bld	r25, 7
    16d8:	08 95       	ret

000016da <sin>:
    16da:	9f 93       	push	r25
    16dc:	29 df       	rcall	.-430    	; 0x1530 <__fp_rempio2>
    16de:	0f 90       	pop	r0
    16e0:	07 fc       	sbrc	r0, 7
    16e2:	ee 5f       	subi	r30, 0xFE	; 254
    16e4:	5d cf       	rjmp	.-326    	; 0x15a0 <__fp_sinus>

000016e6 <__fp_mpack>:
    16e6:	9f 3f       	cpi	r25, 0xFF	; 255
    16e8:	31 f0       	breq	.+12     	; 0x16f6 <__fp_mpack_finite+0xc>

000016ea <__fp_mpack_finite>:
    16ea:	91 50       	subi	r25, 0x01	; 1
    16ec:	20 f4       	brcc	.+8      	; 0x16f6 <__fp_mpack_finite+0xc>
    16ee:	87 95       	ror	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b7 95       	ror	r27
    16f6:	88 0f       	add	r24, r24
    16f8:	91 1d       	adc	r25, r1
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret

00001702 <__fp_powsodd>:
    1702:	9f 93       	push	r25
    1704:	8f 93       	push	r24
    1706:	7f 93       	push	r23
    1708:	6f 93       	push	r22
    170a:	ff 93       	push	r31
    170c:	ef 93       	push	r30
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	80 df       	rcall	.-256    	; 0x1614 <__mulsf3>
    1714:	ef 91       	pop	r30
    1716:	ff 91       	pop	r31
    1718:	05 d0       	rcall	.+10     	; 0x1724 <__fp_powser>
    171a:	2f 91       	pop	r18
    171c:	3f 91       	pop	r19
    171e:	4f 91       	pop	r20
    1720:	5f 91       	pop	r21
    1722:	78 cf       	rjmp	.-272    	; 0x1614 <__mulsf3>

00001724 <__fp_powser>:
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	1f 93       	push	r17
    172a:	0f 93       	push	r16
    172c:	ff 92       	push	r15
    172e:	ef 92       	push	r14
    1730:	df 92       	push	r13
    1732:	7b 01       	movw	r14, r22
    1734:	8c 01       	movw	r16, r24
    1736:	68 94       	set
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__fp_powser+0x20>
    173a:	da 2e       	mov	r13, r26
    173c:	ef 01       	movw	r28, r30
    173e:	76 df       	rcall	.-276    	; 0x162c <__mulsf3x>
    1740:	fe 01       	movw	r30, r28
    1742:	e8 94       	clt
    1744:	a5 91       	lpm	r26, Z+
    1746:	25 91       	lpm	r18, Z+
    1748:	35 91       	lpm	r19, Z+
    174a:	45 91       	lpm	r20, Z+
    174c:	55 91       	lpm	r21, Z+
    174e:	ae f3       	brts	.-22     	; 0x173a <__fp_powser+0x16>
    1750:	ef 01       	movw	r28, r30
    1752:	aa dd       	rcall	.-1196   	; 0x12a8 <__addsf3x>
    1754:	fe 01       	movw	r30, r28
    1756:	97 01       	movw	r18, r14
    1758:	a8 01       	movw	r20, r16
    175a:	da 94       	dec	r13
    175c:	79 f7       	brne	.-34     	; 0x173c <__fp_powser+0x18>
    175e:	df 90       	pop	r13
    1760:	ef 90       	pop	r14
    1762:	ff 90       	pop	r15
    1764:	0f 91       	pop	r16
    1766:	1f 91       	pop	r17
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <__tablejump2__>:
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	88 1f       	adc	r24, r24
    1774:	8b bf       	out	0x3b, r24	; 59
    1776:	07 90       	elpm	r0, Z+
    1778:	f6 91       	elpm	r31, Z
    177a:	e0 2d       	mov	r30, r0
    177c:	19 94       	eijmp

0000177e <_exit>:
    177e:	f8 94       	cli

00001780 <__stop_program>:
    1780:	ff cf       	rjmp	.-2      	; 0x1780 <__stop_program>
