
compass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000ab0  00000b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080013e  0080013e  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f0  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074c  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070d  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000531  00000000  00000000  00003989  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_18>
  4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_19>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	e0 eb       	ldi	r30, 0xB0	; 176
  aa:	fa e0       	ldi	r31, 0x0A	; 10
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	ae 33       	cpi	r26, 0x3E	; 62
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	ae e3       	ldi	r26, 0x3E	; 62
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a9 38       	cpi	r26, 0x89	; 137
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  cc:	0c 94 56 05 	jmp	0xaac	; 0xaac <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <_Z13init_HMC5883Lv>:
int16_t raw_y = 0;
int16_t raw_z = 0;

void init_HMC5883L(void){

	i2c_init();
  d4:	0e 94 4f 01 	call	0x29e	; 0x29e <_Z8i2c_initv>
	i2c_start(HMC5883L_WRITE);
  d8:	8c e3       	ldi	r24, 0x3C	; 60
  da:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z9i2c_starth>
	i2c_write(0x00); // set pointer to CRA 0x10
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_write(0x70); // write 0x70 to CRA  Number of samples per output=8  ,data output rate=15
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_stop();
  ea:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8i2c_stopv>

	i2c_start(HMC5883L_WRITE);
  ee:	8c e3       	ldi	r24, 0x3C	; 60
  f0:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z9i2c_starth>
	i2c_write(0x01); // set pointer to CRB  0x20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_write(0xA0); //gain=390  resolution(mg/LSB)=2.56  ,output= -2048-2047
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_stop();
 100:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8i2c_stopv>

	i2c_start(HMC5883L_WRITE);
 104:	8c e3       	ldi	r24, 0x3C	; 60
 106:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z9i2c_starth>
	i2c_write(0x02); // set pointer to measurement mode
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_write(0x00); // continous measurement
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_stop();
 116:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8i2c_stopv>
 11a:	08 95       	ret

0000011c <_Z12read_Compassv>:
	
}

void read_Compass(void){

	i2c_start(HMC5883L_WRITE);
 11c:	8c e3       	ldi	r24, 0x3C	; 60
 11e:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z9i2c_starth>
	i2c_write(0x03); //set pointer to X-axis MSB
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 88 01 	call	0x310	; 0x310 <_Z9i2c_writeh>
	i2c_stop();
 128:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8i2c_stopv>
	
	i2c_rep_start(HMC5883L_READ);
 12c:	8d e3       	ldi	r24, 0x3D	; 61
 12e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z13i2c_rep_starth>
	raw_x = ((uint8_t)i2c_readAck())<<8;
 132:	0e 94 9a 01 	call	0x334	; 0x334 <_Z11i2c_readAckv>
 136:	10 92 42 01 	sts	0x0142, r1
 13a:	80 93 43 01 	sts	0x0143, r24
	raw_x |= i2c_readAck();
 13e:	0e 94 9a 01 	call	0x334	; 0x334 <_Z11i2c_readAckv>
 142:	20 91 42 01 	lds	r18, 0x0142
 146:	30 91 43 01 	lds	r19, 0x0143
 14a:	28 2b       	or	r18, r24
 14c:	30 93 43 01 	sts	0x0143, r19
 150:	20 93 42 01 	sts	0x0142, r18
	
	raw_z = ((uint8_t)i2c_readAck())<<8;
 154:	0e 94 9a 01 	call	0x334	; 0x334 <_Z11i2c_readAckv>
 158:	10 92 3e 01 	sts	0x013E, r1
 15c:	80 93 3f 01 	sts	0x013F, r24
	raw_z |= i2c_readAck();
 160:	0e 94 9a 01 	call	0x334	; 0x334 <_Z11i2c_readAckv>
 164:	20 91 3e 01 	lds	r18, 0x013E
 168:	30 91 3f 01 	lds	r19, 0x013F
 16c:	28 2b       	or	r18, r24
 16e:	30 93 3f 01 	sts	0x013F, r19
 172:	20 93 3e 01 	sts	0x013E, r18
	
	
	raw_y = ((uint8_t)i2c_readAck())<<8;
 176:	0e 94 9a 01 	call	0x334	; 0x334 <_Z11i2c_readAckv>
 17a:	10 92 40 01 	sts	0x0140, r1
 17e:	80 93 41 01 	sts	0x0141, r24
	raw_y |= i2c_readNak();
 182:	0e 94 a5 01 	call	0x34a	; 0x34a <_Z11i2c_readNakv>
 186:	20 91 40 01 	lds	r18, 0x0140
 18a:	30 91 41 01 	lds	r19, 0x0141
 18e:	28 2b       	or	r18, r24
 190:	30 93 41 01 	sts	0x0141, r19
 194:	20 93 40 01 	sts	0x0140, r18
	
	
	i2c_stop();
 198:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8i2c_stopv>
 19c:	08 95       	ret

0000019e <_Z14calculateAnglev>:
	
}

int calculateAngle()
{
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
	return ((atan2((double)raw_y,(double)raw_x)* 180 / 3.14159265 + 180.0));
 1a6:	60 91 42 01 	lds	r22, 0x0142
 1aa:	70 91 43 01 	lds	r23, 0x0143
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
 1ba:	6b 01       	movw	r12, r22
 1bc:	7c 01       	movw	r14, r24
 1be:	80 91 40 01 	lds	r24, 0x0140
 1c2:	90 91 41 01 	lds	r25, 0x0141
 1c6:	bc 01       	movw	r22, r24
 1c8:	99 0f       	add	r25, r25
 1ca:	88 0b       	sbc	r24, r24
 1cc:	99 0b       	sbc	r25, r25
 1ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
 1d2:	a7 01       	movw	r20, r14
 1d4:	96 01       	movw	r18, r12
 1d6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <atan2>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	44 e3       	ldi	r20, 0x34	; 52
 1e0:	53 e4       	ldi	r21, 0x43	; 67
 1e2:	0e 94 b0 04 	call	0x960	; 0x960 <__mulsf3>
 1e6:	2b ed       	ldi	r18, 0xDB	; 219
 1e8:	3f e0       	ldi	r19, 0x0F	; 15
 1ea:	49 e4       	ldi	r20, 0x49	; 73
 1ec:	50 e4       	ldi	r21, 0x40	; 64
 1ee:	0e 94 4b 03 	call	0x696	; 0x696 <__divsf3>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	44 e3       	ldi	r20, 0x34	; 52
 1f8:	53 e4       	ldi	r21, 0x43	; 67
 1fa:	0e 94 6d 02 	call	0x4da	; 0x4da <__addsf3>
 1fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixsfsi>
}
 202:	cb 01       	movw	r24, r22
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	08 95       	ret

0000020e <main>:
#include "uart.h"


int main(void)
{
	sei();
 20e:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 05 02 	call	0x40a	; 0x40a <_Z10uart0_initj>
    init_HMC5883L();
 218:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z13init_HMC5883Lv>
	uart0_puts("Initializing compass ...\r\n");
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	85 ea       	ldi	r24, 0xA5	; 165
 228:	9e e0       	ldi	r25, 0x0E	; 14
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x1c>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x26>
 234:	00 00       	nop
	_delay_ms(300);
	uart0_puts("... \r\n");
 236:	8b e1       	ldi	r24, 0x1B	; 27
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	85 ea       	ldi	r24, 0xA5	; 165
 242:	9e e0       	ldi	r25, 0x0E	; 14
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x36>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x40>
 24e:	00 00       	nop
	_delay_ms(300);
	uart0_puts("...\r\n");
 250:	85 e1       	ldi	r24, 0x15	; 21
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>
    while (1) 
    {
		
		read_Compass();
 258:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z12read_Compassv>
		
		uart0_puts("RAW X: ");uart0_putint(raw_x);
 25c:	82 e2       	ldi	r24, 0x22	; 34
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>
 264:	80 91 42 01 	lds	r24, 0x0142
 268:	90 91 43 01 	lds	r25, 0x0143
 26c:	0e 94 33 02 	call	0x466	; 0x466 <_Z12uart0_putinti>
		uart0_puts("\tRAW Y: ");uart0_putint(raw_y);
 270:	8a e2       	ldi	r24, 0x2A	; 42
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>
 278:	80 91 40 01 	lds	r24, 0x0140
 27c:	90 91 41 01 	lds	r25, 0x0141
 280:	0e 94 33 02 	call	0x466	; 0x466 <_Z12uart0_putinti>
		uart0_puts("\tangle = ");uart0_putint(calculateAngle());
 284:	83 e3       	ldi	r24, 0x33	; 51
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>
 28c:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14calculateAnglev>
 290:	0e 94 33 02 	call	0x466	; 0x466 <_Z12uart0_putinti>
		uart0_puts("\r\n");
 294:	8f e1       	ldi	r24, 0x1F	; 31
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z10uart0_putsPKc>

#include "compass.h"
#include "uart.h"


int main(void)
 29c:	dd cf       	rjmp	.-70     	; 0x258 <main+0x4a>

0000029e <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 29e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 2a2:	88 e4       	ldi	r24, 0x48	; 72
 2a4:	80 93 b8 00 	sts	0x00B8, r24
 2a8:	08 95       	ret

000002aa <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2aa:	94 ea       	ldi	r25, 0xA4	; 164
 2ac:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 2b0:	ec eb       	ldi	r30, 0xBC	; 188
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	99 23       	and	r25, r25
 2b8:	ec f7       	brge	.-6      	; 0x2b4 <_Z9i2c_starth+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 2ba:	90 91 b9 00 	lds	r25, 0x00B9
 2be:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 2c0:	98 30       	cpi	r25, 0x08	; 8
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <_Z9i2c_starth+0x1e>
 2c4:	90 31       	cpi	r25, 0x10	; 16
 2c6:	a1 f4       	brne	.+40     	; 0x2f0 <_Z9i2c_starth+0x46>

	// send device address
	TWDR = address;
 2c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 2cc:	84 e8       	ldi	r24, 0x84	; 132
 2ce:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 2d2:	ec eb       	ldi	r30, 0xBC	; 188
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	88 23       	and	r24, r24
 2da:	ec f7       	brge	.-6      	; 0x2d6 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 2dc:	90 91 b9 00 	lds	r25, 0x00B9
 2e0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 2e2:	98 31       	cpi	r25, 0x18	; 24
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <_Z9i2c_starth+0x4a>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 34       	cpi	r25, 0x40	; 64
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <_Z9i2c_starth+0x4c>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 2f4:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 2f6:	08 95       	ret

000002f8 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 2f8:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z9i2c_starth>

}/* i2c_rep_start */
 2fc:	08 95       	ret

000002fe <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2fe:	84 e9       	ldi	r24, 0x94	; 148
 300:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 304:	ec eb       	ldi	r30, 0xBC	; 188
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	84 fd       	sbrc	r24, 4
 30c:	fd cf       	rjmp	.-6      	; 0x308 <_Z8i2c_stopv+0xa>

}/* i2c_stop */
 30e:	08 95       	ret

00000310 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 310:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 314:	84 e8       	ldi	r24, 0x84	; 132
 316:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 31a:	ec eb       	ldi	r30, 0xBC	; 188
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	88 23       	and	r24, r24
 322:	ec f7       	brge	.-6      	; 0x31e <_Z9i2c_writeh+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 324:	90 91 b9 00 	lds	r25, 0x00B9
 328:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	98 32       	cpi	r25, 0x28	; 40
 32e:	09 f4       	brne	.+2      	; 0x332 <_Z9i2c_writeh+0x22>
 330:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 332:	08 95       	ret

00000334 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 334:	84 ec       	ldi	r24, 0xC4	; 196
 336:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 33a:	ec eb       	ldi	r30, 0xBC	; 188
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	88 23       	and	r24, r24
 342:	ec f7       	brge	.-6      	; 0x33e <_Z11i2c_readAckv+0xa>

    return TWDR;
 344:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 348:	08 95       	ret

0000034a <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 34a:	84 e8       	ldi	r24, 0x84	; 132
 34c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)) );
 350:	ec eb       	ldi	r30, 0xBC	; 188
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	ec f7       	brge	.-6      	; 0x354 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
 35a:	80 91 bb 00 	lds	r24, 0x00BB

 35e:	08 95       	ret

00000360 <__vector_18>:
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
 374:	80 91 c0 00 	lds	r24, 0x00C0
 378:	20 91 c6 00 	lds	r18, 0x00C6
 37c:	88 71       	andi	r24, 0x18	; 24
 37e:	e0 91 46 01 	lds	r30, 0x0146
 382:	ef 5f       	subi	r30, 0xFF	; 255
 384:	ef 71       	andi	r30, 0x1F	; 31
 386:	90 91 45 01 	lds	r25, 0x0145
 38a:	e9 17       	cp	r30, r25
 38c:	39 f0       	breq	.+14     	; 0x39c <__vector_18+0x3c>
 38e:	e0 93 46 01 	sts	0x0146, r30
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e7 5b       	subi	r30, 0xB7	; 183
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	20 83       	st	Z, r18
 39a:	01 c0       	rjmp	.+2      	; 0x39e <__vector_18+0x3e>
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	80 93 44 01 	sts	0x0144, r24
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_19>:
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
 3c8:	90 91 48 01 	lds	r25, 0x0148
 3cc:	80 91 47 01 	lds	r24, 0x0147
 3d0:	98 17       	cp	r25, r24
 3d2:	69 f0       	breq	.+26     	; 0x3ee <__vector_19+0x38>
 3d4:	e0 91 47 01 	lds	r30, 0x0147
 3d8:	ef 5f       	subi	r30, 0xFF	; 255
 3da:	ef 71       	andi	r30, 0x1F	; 31
 3dc:	e0 93 47 01 	sts	0x0147, r30
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	e7 59       	subi	r30, 0x97	; 151
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	80 81       	ld	r24, Z
 3e8:	80 93 c6 00 	sts	0x00C6, r24
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <__vector_19+0x42>
 3ee:	e1 ec       	ldi	r30, 0xC1	; 193
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	8f 7d       	andi	r24, 0xDF	; 223
 3f6:	80 83       	st	Z, r24
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <_Z10uart0_initj>:
 40a:	10 92 48 01 	sts	0x0148, r1
 40e:	10 92 47 01 	sts	0x0147, r1
 412:	10 92 46 01 	sts	0x0146, r1
 416:	10 92 45 01 	sts	0x0145, r1
 41a:	99 23       	and	r25, r25
 41c:	24 f4       	brge	.+8      	; 0x426 <_Z10uart0_initj+0x1c>
 41e:	22 e0       	ldi	r18, 0x02	; 2
 420:	20 93 c0 00 	sts	0x00C0, r18
 424:	9f 77       	andi	r25, 0x7F	; 127
 426:	90 93 c5 00 	sts	0x00C5, r25
 42a:	80 93 c4 00 	sts	0x00C4, r24
 42e:	88 e9       	ldi	r24, 0x98	; 152
 430:	80 93 c1 00 	sts	0x00C1, r24
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	80 93 c2 00 	sts	0x00C2, r24
 43a:	08 95       	ret

0000043c <_Z10uart0_putch>:
void uart0_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART0_TxHead + 1) & UART_TX_BUFFER_MASK;
 43c:	20 91 48 01 	lds	r18, 0x0148
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART0_TxTail) {
 444:	90 91 47 01 	lds	r25, 0x0147
 448:	29 17       	cp	r18, r25
 44a:	e1 f3       	breq	.-8      	; 0x444 <_Z10uart0_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART0_TxBuf[tmphead] = data;
 44c:	e2 2f       	mov	r30, r18
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	e7 59       	subi	r30, 0x97	; 151
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	80 83       	st	Z, r24
	UART0_TxHead = tmphead;
 456:	20 93 48 01 	sts	0x0148, r18

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
 45a:	e1 ec       	ldi	r30, 0xC1	; 193
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	80 62       	ori	r24, 0x20	; 32
 462:	80 83       	st	Z, r24
 464:	08 95       	ret

00000466 <_Z12uart0_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_putint(int input)
{
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	2f 97       	sbiw	r28, 0x0f	; 15
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 47e:	4a e0       	ldi	r20, 0x0A	; 10
 480:	be 01       	movw	r22, r28
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	0e 94 21 05 	call	0xa42	; 0xa42 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 23       	and	r24, r24
 48e:	51 f0       	breq	.+20     	; 0x4a4 <_Z12uart0_putinti+0x3e>
 490:	8e 01       	movw	r16, r28
 492:	0e 5f       	subi	r16, 0xFE	; 254
 494:	1f 4f       	sbci	r17, 0xFF	; 255
	uart0_putc(*s++);
 496:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z10uart0_putch>
void uart0_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 49a:	f8 01       	movw	r30, r16
 49c:	81 91       	ld	r24, Z+
 49e:	8f 01       	movw	r16, r30
 4a0:	81 11       	cpse	r24, r1
 4a2:	f9 cf       	rjmp	.-14     	; 0x496 <_Z12uart0_putinti+0x30>
	uart0_putc(*s++);

	}/* uart0_putint */
 4a4:	2f 96       	adiw	r28, 0x0f	; 15
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <_Z10uart0_putsPKc>:
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	while (*s)
 4c0:	88 81       	ld	r24, Y
 4c2:	88 23       	and	r24, r24
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <_Z10uart0_putsPKc+0x18>
 4c6:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 4c8:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z10uart0_putch>
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
	while (*s)
 4cc:	89 91       	ld	r24, Y+
 4ce:	81 11       	cpse	r24, r1
 4d0:	fb cf       	rjmp	.-10     	; 0x4c8 <_Z10uart0_putsPKc+0xe>
		uart0_putc(*s++);

}/* uart_puts */
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <__subsf3>:
 4d8:	50 58       	subi	r21, 0x80	; 128

000004da <__addsf3>:
 4da:	bb 27       	eor	r27, r27
 4dc:	aa 27       	eor	r26, r26
 4de:	0e 94 84 02 	call	0x508	; 0x508 <__addsf3x>
 4e2:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>
 4e6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 4ea:	38 f0       	brcs	.+14     	; 0x4fa <__addsf3+0x20>
 4ec:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 4f0:	20 f0       	brcs	.+8      	; 0x4fa <__addsf3+0x20>
 4f2:	39 f4       	brne	.+14     	; 0x502 <__addsf3+0x28>
 4f4:	9f 3f       	cpi	r25, 0xFF	; 255
 4f6:	19 f4       	brne	.+6      	; 0x4fe <__addsf3+0x24>
 4f8:	26 f4       	brtc	.+8      	; 0x502 <__addsf3+0x28>
 4fa:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>
 4fe:	0e f4       	brtc	.+2      	; 0x502 <__addsf3+0x28>
 500:	e0 95       	com	r30
 502:	e7 fb       	bst	r30, 7
 504:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>

00000508 <__addsf3x>:
 508:	e9 2f       	mov	r30, r25
 50a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 50e:	58 f3       	brcs	.-42     	; 0x4e6 <__addsf3+0xc>
 510:	ba 17       	cp	r27, r26
 512:	62 07       	cpc	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	95 07       	cpc	r25, r21
 51a:	20 f0       	brcs	.+8      	; 0x524 <__addsf3x+0x1c>
 51c:	79 f4       	brne	.+30     	; 0x53c <__addsf3x+0x34>
 51e:	a6 f5       	brtc	.+104    	; 0x588 <__addsf3x+0x80>
 520:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_zero>
 524:	0e f4       	brtc	.+2      	; 0x528 <__addsf3x+0x20>
 526:	e0 95       	com	r30
 528:	0b 2e       	mov	r0, r27
 52a:	ba 2f       	mov	r27, r26
 52c:	a0 2d       	mov	r26, r0
 52e:	0b 01       	movw	r0, r22
 530:	b9 01       	movw	r22, r18
 532:	90 01       	movw	r18, r0
 534:	0c 01       	movw	r0, r24
 536:	ca 01       	movw	r24, r20
 538:	a0 01       	movw	r20, r0
 53a:	11 24       	eor	r1, r1
 53c:	ff 27       	eor	r31, r31
 53e:	59 1b       	sub	r21, r25
 540:	99 f0       	breq	.+38     	; 0x568 <__addsf3x+0x60>
 542:	59 3f       	cpi	r21, 0xF9	; 249
 544:	50 f4       	brcc	.+20     	; 0x55a <__addsf3x+0x52>
 546:	50 3e       	cpi	r21, 0xE0	; 224
 548:	68 f1       	brcs	.+90     	; 0x5a4 <__addsf3x+0x9c>
 54a:	1a 16       	cp	r1, r26
 54c:	f0 40       	sbci	r31, 0x00	; 0
 54e:	a2 2f       	mov	r26, r18
 550:	23 2f       	mov	r18, r19
 552:	34 2f       	mov	r19, r20
 554:	44 27       	eor	r20, r20
 556:	58 5f       	subi	r21, 0xF8	; 248
 558:	f3 cf       	rjmp	.-26     	; 0x540 <__addsf3x+0x38>
 55a:	46 95       	lsr	r20
 55c:	37 95       	ror	r19
 55e:	27 95       	ror	r18
 560:	a7 95       	ror	r26
 562:	f0 40       	sbci	r31, 0x00	; 0
 564:	53 95       	inc	r21
 566:	c9 f7       	brne	.-14     	; 0x55a <__addsf3x+0x52>
 568:	7e f4       	brtc	.+30     	; 0x588 <__addsf3x+0x80>
 56a:	1f 16       	cp	r1, r31
 56c:	ba 0b       	sbc	r27, r26
 56e:	62 0b       	sbc	r22, r18
 570:	73 0b       	sbc	r23, r19
 572:	84 0b       	sbc	r24, r20
 574:	ba f0       	brmi	.+46     	; 0x5a4 <__addsf3x+0x9c>
 576:	91 50       	subi	r25, 0x01	; 1
 578:	a1 f0       	breq	.+40     	; 0x5a2 <__addsf3x+0x9a>
 57a:	ff 0f       	add	r31, r31
 57c:	bb 1f       	adc	r27, r27
 57e:	66 1f       	adc	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	c2 f7       	brpl	.-16     	; 0x576 <__addsf3x+0x6e>
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <__addsf3x+0x9c>
 588:	ba 0f       	add	r27, r26
 58a:	62 1f       	adc	r22, r18
 58c:	73 1f       	adc	r23, r19
 58e:	84 1f       	adc	r24, r20
 590:	48 f4       	brcc	.+18     	; 0x5a4 <__addsf3x+0x9c>
 592:	87 95       	ror	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b7 95       	ror	r27
 59a:	f7 95       	ror	r31
 59c:	9e 3f       	cpi	r25, 0xFE	; 254
 59e:	08 f0       	brcs	.+2      	; 0x5a2 <__addsf3x+0x9a>
 5a0:	b0 cf       	rjmp	.-160    	; 0x502 <__addsf3+0x28>
 5a2:	93 95       	inc	r25
 5a4:	88 0f       	add	r24, r24
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <__addsf3x+0xa2>
 5a8:	99 27       	eor	r25, r25
 5aa:	ee 0f       	add	r30, r30
 5ac:	97 95       	ror	r25
 5ae:	87 95       	ror	r24
 5b0:	08 95       	ret
 5b2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 5b6:	60 f0       	brcs	.+24     	; 0x5d0 <__addsf3x+0xc8>
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <__addsf3x+0xb8>
 5be:	9e ef       	ldi	r25, 0xFE	; 254
 5c0:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 5c4:	28 f0       	brcs	.+10     	; 0x5d0 <__addsf3x+0xc8>
 5c6:	40 e8       	ldi	r20, 0x80	; 128
 5c8:	51 e0       	ldi	r21, 0x01	; 1
 5ca:	71 f4       	brne	.+28     	; 0x5e8 <atan2+0x10>
 5cc:	5e ef       	ldi	r21, 0xFE	; 254
 5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <atan2+0x10>
 5d0:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>
 5d4:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_zero>

000005d8 <atan2>:
 5d8:	e9 2f       	mov	r30, r25
 5da:	e0 78       	andi	r30, 0x80	; 128
 5dc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 5e0:	40 f3       	brcs	.-48     	; 0x5b2 <__addsf3x+0xaa>
 5e2:	09 2e       	mov	r0, r25
 5e4:	05 2a       	or	r0, r21
 5e6:	b1 f3       	breq	.-20     	; 0x5d4 <__addsf3x+0xcc>
 5e8:	26 17       	cp	r18, r22
 5ea:	37 07       	cpc	r19, r23
 5ec:	48 07       	cpc	r20, r24
 5ee:	59 07       	cpc	r21, r25
 5f0:	38 f0       	brcs	.+14     	; 0x600 <atan2+0x28>
 5f2:	0e 2e       	mov	r0, r30
 5f4:	07 f8       	bld	r0, 7
 5f6:	e0 25       	eor	r30, r0
 5f8:	69 f0       	breq	.+26     	; 0x614 <atan2+0x3c>
 5fa:	e0 25       	eor	r30, r0
 5fc:	e0 64       	ori	r30, 0x40	; 64
 5fe:	0a c0       	rjmp	.+20     	; 0x614 <atan2+0x3c>
 600:	ef 63       	ori	r30, 0x3F	; 63
 602:	07 f8       	bld	r0, 7
 604:	00 94       	com	r0
 606:	07 fa       	bst	r0, 7
 608:	db 01       	movw	r26, r22
 60a:	b9 01       	movw	r22, r18
 60c:	9d 01       	movw	r18, r26
 60e:	dc 01       	movw	r26, r24
 610:	ca 01       	movw	r24, r20
 612:	ad 01       	movw	r20, r26
 614:	ef 93       	push	r30
 616:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__divsf3_pse>
 61a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_round>
 61e:	0e 94 1c 03 	call	0x638	; 0x638 <atan>
 622:	5f 91       	pop	r21
 624:	55 23       	and	r21, r21
 626:	39 f0       	breq	.+14     	; 0x636 <atan2+0x5e>
 628:	2b ed       	ldi	r18, 0xDB	; 219
 62a:	3f e0       	ldi	r19, 0x0F	; 15
 62c:	49 e4       	ldi	r20, 0x49	; 73
 62e:	50 fd       	sbrc	r21, 0
 630:	49 ec       	ldi	r20, 0xC9	; 201
 632:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__addsf3>
 636:	08 95       	ret

00000638 <atan>:
 638:	df 93       	push	r29
 63a:	dd 27       	eor	r29, r29
 63c:	b9 2f       	mov	r27, r25
 63e:	bf 77       	andi	r27, 0x7F	; 127
 640:	40 e8       	ldi	r20, 0x80	; 128
 642:	5f e3       	ldi	r21, 0x3F	; 63
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	48 07       	cpc	r20, r24
 64a:	5b 07       	cpc	r21, r27
 64c:	18 f4       	brcc	.+6      	; 0x654 <atan+0x1c>
 64e:	d9 2f       	mov	r29, r25
 650:	0e 94 a8 04 	call	0x950	; 0x950 <inverse>
 654:	9f 93       	push	r25
 656:	8f 93       	push	r24
 658:	7f 93       	push	r23
 65a:	6f 93       	push	r22
 65c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <square>
 660:	e8 e6       	ldi	r30, 0x68	; 104
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	0e 94 39 04 	call	0x872	; 0x872 <__fp_powser>
 668:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_round>
 66c:	2f 91       	pop	r18
 66e:	3f 91       	pop	r19
 670:	4f 91       	pop	r20
 672:	5f 91       	pop	r21
 674:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3x>
 678:	dd 23       	and	r29, r29
 67a:	51 f0       	breq	.+20     	; 0x690 <atan+0x58>
 67c:	90 58       	subi	r25, 0x80	; 128
 67e:	a2 ea       	ldi	r26, 0xA2	; 162
 680:	2a ed       	ldi	r18, 0xDA	; 218
 682:	3f e0       	ldi	r19, 0x0F	; 15
 684:	49 ec       	ldi	r20, 0xC9	; 201
 686:	5f e3       	ldi	r21, 0x3F	; 63
 688:	d0 78       	andi	r29, 0x80	; 128
 68a:	5d 27       	eor	r21, r29
 68c:	0e 94 84 02 	call	0x508	; 0x508 <__addsf3x>
 690:	df 91       	pop	r29
 692:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>

00000696 <__divsf3>:
 696:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3x>
 69a:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>
 69e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 6a2:	58 f0       	brcs	.+22     	; 0x6ba <__divsf3+0x24>
 6a4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 6a8:	40 f0       	brcs	.+16     	; 0x6ba <__divsf3+0x24>
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <__divsf3+0x20>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	29 f0       	breq	.+10     	; 0x6ba <__divsf3+0x24>
 6b0:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
 6b4:	51 11       	cpse	r21, r1
 6b6:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 6ba:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>

000006be <__divsf3x>:
 6be:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 6c2:	68 f3       	brcs	.-38     	; 0x69e <__divsf3+0x8>

000006c4 <__divsf3_pse>:
 6c4:	99 23       	and	r25, r25
 6c6:	b1 f3       	breq	.-20     	; 0x6b4 <__divsf3+0x1e>
 6c8:	55 23       	and	r21, r21
 6ca:	91 f3       	breq	.-28     	; 0x6b0 <__divsf3+0x1a>
 6cc:	95 1b       	sub	r25, r21
 6ce:	55 0b       	sbc	r21, r21
 6d0:	bb 27       	eor	r27, r27
 6d2:	aa 27       	eor	r26, r26
 6d4:	62 17       	cp	r22, r18
 6d6:	73 07       	cpc	r23, r19
 6d8:	84 07       	cpc	r24, r20
 6da:	38 f0       	brcs	.+14     	; 0x6ea <__divsf3_pse+0x26>
 6dc:	9f 5f       	subi	r25, 0xFF	; 255
 6de:	5f 4f       	sbci	r21, 0xFF	; 255
 6e0:	22 0f       	add	r18, r18
 6e2:	33 1f       	adc	r19, r19
 6e4:	44 1f       	adc	r20, r20
 6e6:	aa 1f       	adc	r26, r26
 6e8:	a9 f3       	breq	.-22     	; 0x6d4 <__divsf3_pse+0x10>
 6ea:	35 d0       	rcall	.+106    	; 0x756 <__divsf3_pse+0x92>
 6ec:	0e 2e       	mov	r0, r30
 6ee:	3a f0       	brmi	.+14     	; 0x6fe <__divsf3_pse+0x3a>
 6f0:	e0 e8       	ldi	r30, 0x80	; 128
 6f2:	32 d0       	rcall	.+100    	; 0x758 <__divsf3_pse+0x94>
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	50 40       	sbci	r21, 0x00	; 0
 6f8:	e6 95       	lsr	r30
 6fa:	00 1c       	adc	r0, r0
 6fc:	ca f7       	brpl	.-14     	; 0x6f0 <__divsf3_pse+0x2c>
 6fe:	2b d0       	rcall	.+86     	; 0x756 <__divsf3_pse+0x92>
 700:	fe 2f       	mov	r31, r30
 702:	29 d0       	rcall	.+82     	; 0x756 <__divsf3_pse+0x92>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	bb 1f       	adc	r27, r27
 70c:	26 17       	cp	r18, r22
 70e:	37 07       	cpc	r19, r23
 710:	48 07       	cpc	r20, r24
 712:	ab 07       	cpc	r26, r27
 714:	b0 e8       	ldi	r27, 0x80	; 128
 716:	09 f0       	breq	.+2      	; 0x71a <__divsf3_pse+0x56>
 718:	bb 0b       	sbc	r27, r27
 71a:	80 2d       	mov	r24, r0
 71c:	bf 01       	movw	r22, r30
 71e:	ff 27       	eor	r31, r31
 720:	93 58       	subi	r25, 0x83	; 131
 722:	5f 4f       	sbci	r21, 0xFF	; 255
 724:	3a f0       	brmi	.+14     	; 0x734 <__divsf3_pse+0x70>
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	51 05       	cpc	r21, r1
 72a:	78 f0       	brcs	.+30     	; 0x74a <__divsf3_pse+0x86>
 72c:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
 730:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 734:	5f 3f       	cpi	r21, 0xFF	; 255
 736:	e4 f3       	brlt	.-8      	; 0x730 <__divsf3_pse+0x6c>
 738:	98 3e       	cpi	r25, 0xE8	; 232
 73a:	d4 f3       	brlt	.-12     	; 0x730 <__divsf3_pse+0x6c>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b7 95       	ror	r27
 744:	f7 95       	ror	r31
 746:	9f 5f       	subi	r25, 0xFF	; 255
 748:	c9 f7       	brne	.-14     	; 0x73c <__divsf3_pse+0x78>
 74a:	88 0f       	add	r24, r24
 74c:	91 1d       	adc	r25, r1
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret
 756:	e1 e0       	ldi	r30, 0x01	; 1
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	84 07       	cpc	r24, r20
 766:	ba 07       	cpc	r27, r26
 768:	20 f0       	brcs	.+8      	; 0x772 <__divsf3_pse+0xae>
 76a:	62 1b       	sub	r22, r18
 76c:	73 0b       	sbc	r23, r19
 76e:	84 0b       	sbc	r24, r20
 770:	ba 0b       	sbc	r27, r26
 772:	ee 1f       	adc	r30, r30
 774:	88 f7       	brcc	.-30     	; 0x758 <__divsf3_pse+0x94>
 776:	e0 95       	com	r30
 778:	08 95       	ret

0000077a <__fixsfsi>:
 77a:	0e 94 c4 03 	call	0x788	; 0x788 <__fixunssfsi>
 77e:	68 94       	set
 780:	b1 11       	cpse	r27, r1
 782:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 786:	08 95       	ret

00000788 <__fixunssfsi>:
 788:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_splitA>
 78c:	88 f0       	brcs	.+34     	; 0x7b0 <__fixunssfsi+0x28>
 78e:	9f 57       	subi	r25, 0x7F	; 127
 790:	98 f0       	brcs	.+38     	; 0x7b8 <__fixunssfsi+0x30>
 792:	b9 2f       	mov	r27, r25
 794:	99 27       	eor	r25, r25
 796:	b7 51       	subi	r27, 0x17	; 23
 798:	b0 f0       	brcs	.+44     	; 0x7c6 <__fixunssfsi+0x3e>
 79a:	e1 f0       	breq	.+56     	; 0x7d4 <__fixunssfsi+0x4c>
 79c:	66 0f       	add	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	1a f0       	brmi	.+6      	; 0x7ac <__fixunssfsi+0x24>
 7a6:	ba 95       	dec	r27
 7a8:	c9 f7       	brne	.-14     	; 0x79c <__fixunssfsi+0x14>
 7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <__fixunssfsi+0x4c>
 7ac:	b1 30       	cpi	r27, 0x01	; 1
 7ae:	91 f0       	breq	.+36     	; 0x7d4 <__fixunssfsi+0x4c>
 7b0:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_zero>
 7b4:	b1 e0       	ldi	r27, 0x01	; 1
 7b6:	08 95       	ret
 7b8:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_zero>
 7bc:	67 2f       	mov	r22, r23
 7be:	78 2f       	mov	r23, r24
 7c0:	88 27       	eor	r24, r24
 7c2:	b8 5f       	subi	r27, 0xF8	; 248
 7c4:	39 f0       	breq	.+14     	; 0x7d4 <__fixunssfsi+0x4c>
 7c6:	b9 3f       	cpi	r27, 0xF9	; 249
 7c8:	cc f3       	brlt	.-14     	; 0x7bc <__fixunssfsi+0x34>
 7ca:	86 95       	lsr	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b3 95       	inc	r27
 7d2:	d9 f7       	brne	.-10     	; 0x7ca <__fixunssfsi+0x42>
 7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__fixunssfsi+0x5c>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <__floatunsisf>:
 7e6:	e8 94       	clt
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <__floatsisf+0x12>

000007ea <__floatsisf>:
 7ea:	97 fb       	bst	r25, 7
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__floatsisf+0x12>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	99 23       	and	r25, r25
 7fe:	a9 f0       	breq	.+42     	; 0x82a <__floatsisf+0x40>
 800:	f9 2f       	mov	r31, r25
 802:	96 e9       	ldi	r25, 0x96	; 150
 804:	bb 27       	eor	r27, r27
 806:	93 95       	inc	r25
 808:	f6 95       	lsr	r31
 80a:	87 95       	ror	r24
 80c:	77 95       	ror	r23
 80e:	67 95       	ror	r22
 810:	b7 95       	ror	r27
 812:	f1 11       	cpse	r31, r1
 814:	f8 cf       	rjmp	.-16     	; 0x806 <__floatsisf+0x1c>
 816:	fa f4       	brpl	.+62     	; 0x856 <__floatsisf+0x6c>
 818:	bb 0f       	add	r27, r27
 81a:	11 f4       	brne	.+4      	; 0x820 <__floatsisf+0x36>
 81c:	60 ff       	sbrs	r22, 0
 81e:	1b c0       	rjmp	.+54     	; 0x856 <__floatsisf+0x6c>
 820:	6f 5f       	subi	r22, 0xFF	; 255
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	16 c0       	rjmp	.+44     	; 0x856 <__floatsisf+0x6c>
 82a:	88 23       	and	r24, r24
 82c:	11 f0       	breq	.+4      	; 0x832 <__floatsisf+0x48>
 82e:	96 e9       	ldi	r25, 0x96	; 150
 830:	11 c0       	rjmp	.+34     	; 0x854 <__floatsisf+0x6a>
 832:	77 23       	and	r23, r23
 834:	21 f0       	breq	.+8      	; 0x83e <__floatsisf+0x54>
 836:	9e e8       	ldi	r25, 0x8E	; 142
 838:	87 2f       	mov	r24, r23
 83a:	76 2f       	mov	r23, r22
 83c:	05 c0       	rjmp	.+10     	; 0x848 <__floatsisf+0x5e>
 83e:	66 23       	and	r22, r22
 840:	71 f0       	breq	.+28     	; 0x85e <__floatsisf+0x74>
 842:	96 e8       	ldi	r25, 0x86	; 134
 844:	86 2f       	mov	r24, r22
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	2a f0       	brmi	.+10     	; 0x856 <__floatsisf+0x6c>
 84c:	9a 95       	dec	r25
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	da f7       	brpl	.-10     	; 0x84c <__floatsisf+0x62>
 856:	88 0f       	add	r24, r24
 858:	96 95       	lsr	r25
 85a:	87 95       	ror	r24
 85c:	97 f9       	bld	r25, 7
 85e:	08 95       	ret

00000860 <__fp_inf>:
 860:	97 f9       	bld	r25, 7
 862:	9f 67       	ori	r25, 0x7F	; 127
 864:	80 e8       	ldi	r24, 0x80	; 128
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	08 95       	ret

0000086c <__fp_nan>:
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	80 ec       	ldi	r24, 0xC0	; 192
 870:	08 95       	ret

00000872 <__fp_powser>:
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	1f 93       	push	r17
 878:	0f 93       	push	r16
 87a:	ff 92       	push	r15
 87c:	ef 92       	push	r14
 87e:	df 92       	push	r13
 880:	7b 01       	movw	r14, r22
 882:	8c 01       	movw	r16, r24
 884:	68 94       	set
 886:	06 c0       	rjmp	.+12     	; 0x894 <__fp_powser+0x22>
 888:	da 2e       	mov	r13, r26
 88a:	ef 01       	movw	r28, r30
 88c:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3x>
 890:	fe 01       	movw	r30, r28
 892:	e8 94       	clt
 894:	a5 91       	lpm	r26, Z+
 896:	25 91       	lpm	r18, Z+
 898:	35 91       	lpm	r19, Z+
 89a:	45 91       	lpm	r20, Z+
 89c:	55 91       	lpm	r21, Z+
 89e:	a6 f3       	brts	.-24     	; 0x888 <__fp_powser+0x16>
 8a0:	ef 01       	movw	r28, r30
 8a2:	0e 94 84 02 	call	0x508	; 0x508 <__addsf3x>
 8a6:	fe 01       	movw	r30, r28
 8a8:	97 01       	movw	r18, r14
 8aa:	a8 01       	movw	r20, r16
 8ac:	da 94       	dec	r13
 8ae:	69 f7       	brne	.-38     	; 0x88a <__fp_powser+0x18>
 8b0:	df 90       	pop	r13
 8b2:	ef 90       	pop	r14
 8b4:	ff 90       	pop	r15
 8b6:	0f 91       	pop	r16
 8b8:	1f 91       	pop	r17
 8ba:	cf 91       	pop	r28
 8bc:	df 91       	pop	r29
 8be:	08 95       	ret

000008c0 <__fp_pscA>:
 8c0:	00 24       	eor	r0, r0
 8c2:	0a 94       	dec	r0
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	09 06       	cpc	r0, r25
 8cc:	08 95       	ret

000008ce <__fp_pscB>:
 8ce:	00 24       	eor	r0, r0
 8d0:	0a 94       	dec	r0
 8d2:	12 16       	cp	r1, r18
 8d4:	13 06       	cpc	r1, r19
 8d6:	14 06       	cpc	r1, r20
 8d8:	05 06       	cpc	r0, r21
 8da:	08 95       	ret

000008dc <__fp_round>:
 8dc:	09 2e       	mov	r0, r25
 8de:	03 94       	inc	r0
 8e0:	00 0c       	add	r0, r0
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0xc>
 8e4:	88 23       	and	r24, r24
 8e6:	52 f0       	brmi	.+20     	; 0x8fc <__fp_round+0x20>
 8e8:	bb 0f       	add	r27, r27
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <__fp_round+0x20>
 8ec:	bf 2b       	or	r27, r31
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0x18>
 8f0:	60 ff       	sbrs	r22, 0
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__fp_round+0x20>
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__fp_split3>:
 8fe:	57 fd       	sbrc	r21, 7
 900:	90 58       	subi	r25, 0x80	; 128
 902:	44 0f       	add	r20, r20
 904:	55 1f       	adc	r21, r21
 906:	59 f0       	breq	.+22     	; 0x91e <__fp_splitA+0x10>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	71 f0       	breq	.+28     	; 0x928 <__fp_splitA+0x1a>
 90c:	47 95       	ror	r20

0000090e <__fp_splitA>:
 90e:	88 0f       	add	r24, r24
 910:	97 fb       	bst	r25, 7
 912:	99 1f       	adc	r25, r25
 914:	61 f0       	breq	.+24     	; 0x92e <__fp_splitA+0x20>
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	79 f0       	breq	.+30     	; 0x938 <__fp_splitA+0x2a>
 91a:	87 95       	ror	r24
 91c:	08 95       	ret
 91e:	12 16       	cp	r1, r18
 920:	13 06       	cpc	r1, r19
 922:	14 06       	cpc	r1, r20
 924:	55 1f       	adc	r21, r21
 926:	f2 cf       	rjmp	.-28     	; 0x90c <__stack+0xd>
 928:	46 95       	lsr	r20
 92a:	f1 df       	rcall	.-30     	; 0x90e <__fp_splitA>
 92c:	08 c0       	rjmp	.+16     	; 0x93e <__fp_splitA+0x30>
 92e:	16 16       	cp	r1, r22
 930:	17 06       	cpc	r1, r23
 932:	18 06       	cpc	r1, r24
 934:	99 1f       	adc	r25, r25
 936:	f1 cf       	rjmp	.-30     	; 0x91a <__fp_splitA+0xc>
 938:	86 95       	lsr	r24
 93a:	71 05       	cpc	r23, r1
 93c:	61 05       	cpc	r22, r1
 93e:	08 94       	sec
 940:	08 95       	ret

00000942 <__fp_zero>:
 942:	e8 94       	clt

00000944 <__fp_szero>:
 944:	bb 27       	eor	r27, r27
 946:	66 27       	eor	r22, r22
 948:	77 27       	eor	r23, r23
 94a:	cb 01       	movw	r24, r22
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <inverse>:
 950:	9b 01       	movw	r18, r22
 952:	ac 01       	movw	r20, r24
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	80 e8       	ldi	r24, 0x80	; 128
 95a:	9f e3       	ldi	r25, 0x3F	; 63
 95c:	0c 94 4b 03 	jmp	0x696	; 0x696 <__divsf3>

00000960 <__mulsf3>:
 960:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3x>
 964:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>
 968:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 96c:	38 f0       	brcs	.+14     	; 0x97c <__mulsf3+0x1c>
 96e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 972:	20 f0       	brcs	.+8      	; 0x97c <__mulsf3+0x1c>
 974:	95 23       	and	r25, r21
 976:	11 f0       	breq	.+4      	; 0x97c <__mulsf3+0x1c>
 978:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
 97c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>
 980:	11 24       	eor	r1, r1
 982:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>

00000986 <__mulsf3x>:
 986:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 98a:	70 f3       	brcs	.-36     	; 0x968 <__mulsf3+0x8>

0000098c <__mulsf3_pse>:
 98c:	95 9f       	mul	r25, r21
 98e:	c1 f3       	breq	.-16     	; 0x980 <__mulsf3+0x20>
 990:	95 0f       	add	r25, r21
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	55 1f       	adc	r21, r21
 996:	62 9f       	mul	r22, r18
 998:	f0 01       	movw	r30, r0
 99a:	72 9f       	mul	r23, r18
 99c:	bb 27       	eor	r27, r27
 99e:	f0 0d       	add	r31, r0
 9a0:	b1 1d       	adc	r27, r1
 9a2:	63 9f       	mul	r22, r19
 9a4:	aa 27       	eor	r26, r26
 9a6:	f0 0d       	add	r31, r0
 9a8:	b1 1d       	adc	r27, r1
 9aa:	aa 1f       	adc	r26, r26
 9ac:	64 9f       	mul	r22, r20
 9ae:	66 27       	eor	r22, r22
 9b0:	b0 0d       	add	r27, r0
 9b2:	a1 1d       	adc	r26, r1
 9b4:	66 1f       	adc	r22, r22
 9b6:	82 9f       	mul	r24, r18
 9b8:	22 27       	eor	r18, r18
 9ba:	b0 0d       	add	r27, r0
 9bc:	a1 1d       	adc	r26, r1
 9be:	62 1f       	adc	r22, r18
 9c0:	73 9f       	mul	r23, r19
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	62 1f       	adc	r22, r18
 9c8:	83 9f       	mul	r24, r19
 9ca:	a0 0d       	add	r26, r0
 9cc:	61 1d       	adc	r22, r1
 9ce:	22 1f       	adc	r18, r18
 9d0:	74 9f       	mul	r23, r20
 9d2:	33 27       	eor	r19, r19
 9d4:	a0 0d       	add	r26, r0
 9d6:	61 1d       	adc	r22, r1
 9d8:	23 1f       	adc	r18, r19
 9da:	84 9f       	mul	r24, r20
 9dc:	60 0d       	add	r22, r0
 9de:	21 1d       	adc	r18, r1
 9e0:	82 2f       	mov	r24, r18
 9e2:	76 2f       	mov	r23, r22
 9e4:	6a 2f       	mov	r22, r26
 9e6:	11 24       	eor	r1, r1
 9e8:	9f 57       	subi	r25, 0x7F	; 127
 9ea:	50 40       	sbci	r21, 0x00	; 0
 9ec:	9a f0       	brmi	.+38     	; 0xa14 <__mulsf3_pse+0x88>
 9ee:	f1 f0       	breq	.+60     	; 0xa2c <__mulsf3_pse+0xa0>
 9f0:	88 23       	and	r24, r24
 9f2:	4a f0       	brmi	.+18     	; 0xa06 <__mulsf3_pse+0x7a>
 9f4:	ee 0f       	add	r30, r30
 9f6:	ff 1f       	adc	r31, r31
 9f8:	bb 1f       	adc	r27, r27
 9fa:	66 1f       	adc	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	91 50       	subi	r25, 0x01	; 1
 a02:	50 40       	sbci	r21, 0x00	; 0
 a04:	a9 f7       	brne	.-22     	; 0x9f0 <__mulsf3_pse+0x64>
 a06:	9e 3f       	cpi	r25, 0xFE	; 254
 a08:	51 05       	cpc	r21, r1
 a0a:	80 f0       	brcs	.+32     	; 0xa2c <__mulsf3_pse+0xa0>
 a0c:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
 a10:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 a14:	5f 3f       	cpi	r21, 0xFF	; 255
 a16:	e4 f3       	brlt	.-8      	; 0xa10 <__mulsf3_pse+0x84>
 a18:	98 3e       	cpi	r25, 0xE8	; 232
 a1a:	d4 f3       	brlt	.-12     	; 0xa10 <__mulsf3_pse+0x84>
 a1c:	86 95       	lsr	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	b7 95       	ror	r27
 a24:	f7 95       	ror	r31
 a26:	e7 95       	ror	r30
 a28:	9f 5f       	subi	r25, 0xFF	; 255
 a2a:	c1 f7       	brne	.-16     	; 0xa1c <__mulsf3_pse+0x90>
 a2c:	fe 2b       	or	r31, r30
 a2e:	88 0f       	add	r24, r24
 a30:	91 1d       	adc	r25, r1
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret

00000a3a <square>:
 a3a:	9b 01       	movw	r18, r22
 a3c:	ac 01       	movw	r20, r24
 a3e:	0c 94 b0 04 	jmp	0x960	; 0x960 <__mulsf3>

00000a42 <__itoa_ncheck>:
 a42:	bb 27       	eor	r27, r27
 a44:	4a 30       	cpi	r20, 0x0A	; 10
 a46:	31 f4       	brne	.+12     	; 0xa54 <__itoa_ncheck+0x12>
 a48:	99 23       	and	r25, r25
 a4a:	22 f4       	brpl	.+8      	; 0xa54 <__itoa_ncheck+0x12>
 a4c:	bd e2       	ldi	r27, 0x2D	; 45
 a4e:	90 95       	com	r25
 a50:	81 95       	neg	r24
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__utoa_common>

00000a58 <__utoa_ncheck>:
 a58:	bb 27       	eor	r27, r27

00000a5a <__utoa_common>:
 a5a:	fb 01       	movw	r30, r22
 a5c:	55 27       	eor	r21, r21
 a5e:	aa 27       	eor	r26, r26
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	aa 1f       	adc	r26, r26
 a66:	a4 17       	cp	r26, r20
 a68:	10 f0       	brcs	.+4      	; 0xa6e <__utoa_common+0x14>
 a6a:	a4 1b       	sub	r26, r20
 a6c:	83 95       	inc	r24
 a6e:	50 51       	subi	r21, 0x10	; 16
 a70:	b9 f7       	brne	.-18     	; 0xa60 <__utoa_common+0x6>
 a72:	a0 5d       	subi	r26, 0xD0	; 208
 a74:	aa 33       	cpi	r26, 0x3A	; 58
 a76:	08 f0       	brcs	.+2      	; 0xa7a <__utoa_common+0x20>
 a78:	a9 5d       	subi	r26, 0xD9	; 217
 a7a:	a1 93       	st	Z+, r26
 a7c:	00 97       	sbiw	r24, 0x00	; 0
 a7e:	79 f7       	brne	.-34     	; 0xa5e <__utoa_common+0x4>
 a80:	b1 11       	cpse	r27, r1
 a82:	b1 93       	st	Z+, r27
 a84:	11 92       	st	Z+, r1
 a86:	cb 01       	movw	r24, r22
 a88:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <strrev>

00000a8c <strrev>:
 a8c:	dc 01       	movw	r26, r24
 a8e:	fc 01       	movw	r30, r24
 a90:	67 2f       	mov	r22, r23
 a92:	71 91       	ld	r23, Z+
 a94:	77 23       	and	r23, r23
 a96:	e1 f7       	brne	.-8      	; 0xa90 <strrev+0x4>
 a98:	32 97       	sbiw	r30, 0x02	; 2
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <strrev+0x18>
 a9c:	7c 91       	ld	r23, X
 a9e:	6d 93       	st	X+, r22
 aa0:	70 83       	st	Z, r23
 aa2:	62 91       	ld	r22, -Z
 aa4:	ae 17       	cp	r26, r30
 aa6:	bf 07       	cpc	r27, r31
 aa8:	c8 f3       	brcs	.-14     	; 0xa9c <strrev+0x10>
 aaa:	08 95       	ret

00000aac <_exit>:
 aac:	f8 94       	cli

00000aae <__stop_program>:
 aae:	ff cf       	rjmp	.-2      	; 0xaae <__stop_program>
